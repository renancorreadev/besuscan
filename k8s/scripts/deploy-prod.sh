#!/bin/bash

# =============================================================================
# SCRIPT DE DEPLOY - AMBIENTE DE PRODU√á√ÉO
# =============================================================================
# Este script automatiza o deploy completo do BeSuScan no ambiente de produ√ß√£o
# 
# Uso: ./deploy-prod.sh
# =============================================================================

set -e  # Para na primeira falha

echo "=============================================="
echo "üöÄ BeSuScan - Deploy Produ√ß√£o"
echo "=============================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se kubectl est√° dispon√≠vel
if ! command -v kubectl &> /dev/null; then
    log_error "kubectl n√£o encontrado. Instale o kubectl primeiro."
    exit 1
fi

# Verificar se o cluster est√° acess√≠vel
if ! kubectl cluster-info &> /dev/null; then
    log_error "N√£o foi poss√≠vel conectar ao cluster Kubernetes."
    exit 1
fi

log_success "Conectado ao cluster Kubernetes"

# Navegar para o diret√≥rio correto
cd "$(dirname "$0")/.."

echo ""
log_info "Iniciando deploy do ambiente de produ√ß√£o..."
echo ""

# 1. Aplicar Storage Classes
echo "1Ô∏è‚É£  Aplicando Storage Classes..."
kubectl apply -f shared/storage-classes/storage-classes.yaml
log_success "Storage Classes aplicadas"

# 2. Aplicar Namespace
echo ""
echo "2Ô∏è‚É£  Criando namespace de produ√ß√£o..."
kubectl apply -f namespaces/prod-namespace.yaml
log_success "Namespace besuscan-prod criado"

# 3. Aplicar Volumes Persistentes
echo ""
echo "3Ô∏è‚É£  Criando volumes persistentes..."
kubectl apply -f prod/volumes/persistent-volumes.yaml
log_success "Volumes persistentes criados"

# 4. Aplicar ConfigMaps
echo ""
echo "4Ô∏è‚É£  Aplicando configura√ß√µes (ConfigMaps)..."
kubectl apply -f prod/configmaps/app-config.yaml
log_success "ConfigMaps aplicados"

# 5. Aplicar Secrets
echo ""
echo "5Ô∏è‚É£  Aplicando credenciais (Secrets)..."
kubectl apply -f prod/secrets/app-secrets.yaml
log_success "Secrets aplicados"

# 6. Aplicar Services
echo ""
echo "6Ô∏è‚É£  Criando services..."
kubectl apply -f prod/services/rabbitmq-service.yaml
kubectl apply -f prod/services/redis-service.yaml
kubectl apply -f prod/services/api-service.yaml
kubectl apply -f prod/services/frontend-service.yaml
kubectl apply -f prod/services/indexer-service.yaml
kubectl apply -f prod/services/worker-service.yaml
log_success "Services criados"

# 7. Aplicar Deployments (infraestrutura primeiro)
echo ""
echo "7Ô∏è‚É£  Fazendo deploy da infraestrutura..."
kubectl apply -f prod/deployments/rabbitmq-deployment.yaml
kubectl apply -f prod/deployments/redis-deployment.yaml
log_success "Infraestrutura deployada"

echo ""
log_info "Aguardando infraestrutura ficar pronta..."
kubectl wait --for=condition=ready pod -l component=rabbitmq -n besuscan-prod --timeout=300s
kubectl wait --for=condition=ready pod -l component=redis -n besuscan-prod --timeout=300s
log_success "Infraestrutura pronta"

# 8. Aplicar Deployments da aplica√ß√£o
echo ""
echo "8Ô∏è‚É£  Fazendo deploy da aplica√ß√£o..."
kubectl apply -f prod/deployments/indexer-deployment.yaml
kubectl apply -f prod/deployments/worker-deployment.yaml
kubectl apply -f prod/deployments/api-deployment.yaml
kubectl apply -f prod/deployments/frontend-deployment.yaml
log_success "Aplica√ß√£o deployada"

# 9. Aplicar Ingress
echo ""
echo "9Ô∏è‚É£  Configurando ingress..."
kubectl apply -f prod/ingress/ingress.yaml
log_success "Ingress configurado"

echo ""
log_info "Aguardando aplica√ß√£o ficar pronta..."
kubectl wait --for=condition=ready pod -l app=indexer -n besuscan-prod --timeout=300s
kubectl wait --for=condition=ready pod -l app=worker -n besuscan-prod --timeout=300s
kubectl wait --for=condition=ready pod -l app=api -n besuscan-prod --timeout=300s
kubectl wait --for=condition=ready pod -l app=frontend -n besuscan-prod --timeout=300s

echo ""
echo "=============================================="
echo "üéâ Deploy Conclu√≠do com Sucesso!"
echo "=============================================="
echo ""

# Mostrar status dos pods
echo "üìä Status dos Pods:"
kubectl get pods -n besuscan-prod -o wide

echo ""
echo "üåê Services:"
kubectl get services -n besuscan-prod

echo ""
echo "üîó Acesso √† aplica√ß√£o:"
echo "  ‚Ä¢ Frontend: https://besuscan.com"
echo "  ‚Ä¢ API: https://besuscan.com/api"
echo "  ‚Ä¢ RabbitMQ Management: kubectl port-forward service/rabbitmq-service 15672:15672 -n besuscan-prod"

echo ""
echo "üìã Comandos √∫teis:"
echo "  ‚Ä¢ Ver logs da API: kubectl logs -f deployment/api-deployment -n besuscan-prod"
echo "  ‚Ä¢ Ver logs do Worker: kubectl logs -f deployment/worker-deployment -n besuscan-prod"
echo "  ‚Ä¢ Ver logs do Indexer: kubectl logs -f deployment/indexer-deployment -n besuscan-prod"
echo ""

log_success "Deploy finalizado! üöÄ" 