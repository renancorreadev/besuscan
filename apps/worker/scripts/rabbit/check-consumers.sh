#!/bin/bash

# Script para verificar consumidores RabbitMQ ativos
# Ajuda a detectar duplica√ß√£o de consumidores durante hot-reload

RABBITMQ_HOST=${RABBITMQ_HOST:-"147.93.11.54"}
RABBITMQ_PORT=${RABBITMQ_PORT:-"15673"}
RABBITMQ_USER=${RABBITMQ_USER:-"guest"}
RABBITMQ_PASS=${RABBITMQ_PASS:-"guest"}

echo "üîç Verificando consumidores RabbitMQ ativos..."
echo "Host: $RABBITMQ_HOST:$RABBITMQ_PORT"
echo "----------------------------------------"

# Verificar se curl est√° dispon√≠vel
if ! command -v curl &> /dev/null; then
    echo "‚ùå curl n√£o encontrado. Instale curl para usar este script."
    exit 1
fi

# Verificar se jq est√° dispon√≠vel
if ! command -v jq &> /dev/null; then
    echo "‚ö†Ô∏è jq n√£o encontrado. Sa√≠da ser√° em JSON bruto."
    USE_JQ=false
else
    USE_JQ=true
fi

# Fun√ß√£o para fazer requisi√ß√£o √† API do RabbitMQ
rabbitmq_api() {
    local endpoint=$1
    curl -s -u "$RABBITMQ_USER:$RABBITMQ_PASS" \
         "http://$RABBITMQ_HOST:$RABBITMQ_PORT/api/$endpoint" 2>/dev/null
}

# Fun√ß√£o para verificar se RabbitMQ est√° acess√≠vel
check_rabbitmq() {
    local test_response=$(rabbitmq_api "overview")
    if [ -z "$test_response" ] || echo "$test_response" | grep -q "error\|Error\|404"; then
        echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao RabbitMQ em $RABBITMQ_HOST:$RABBITMQ_PORT"
        echo "   Verifique se:"
        echo "   ‚Ä¢ RabbitMQ est√° rodando"
        echo "   ‚Ä¢ Management plugin est√° habilitado"
        echo "   ‚Ä¢ Host e porta est√£o corretos"
        echo "   ‚Ä¢ Credenciais est√£o corretas (guest/guest)"
        exit 1
    fi
}

# Verificar conectividade
check_rabbitmq

# Verificar conex√µes ativas
echo "üì° Conex√µes ativas:"
connections=$(rabbitmq_api "connections")
if [ "$USE_JQ" = true ] && [ -n "$connections" ]; then
    echo "$connections" | jq -r '.[] | "  ‚Ä¢ \(.name) - \(.user) (\(.state))"' 2>/dev/null || echo "  Nenhuma conex√£o encontrada"
    connection_count=$(echo "$connections" | jq '. | length' 2>/dev/null || echo "0")
    echo "Total: $connection_count conex√µes"
else
    echo "  Erro ao obter conex√µes ou jq n√£o dispon√≠vel"
fi

echo ""

# Verificar canais ativos
echo "üì∫ Canais ativos:"
channels=$(rabbitmq_api "channels")
if [ "$USE_JQ" = true ] && [ -n "$channels" ]; then
    echo "$channels" | jq -r '.[] | "  ‚Ä¢ Canal \(.number) - \(.connection_details.name)"' 2>/dev/null || echo "  Nenhum canal encontrado"
    channel_count=$(echo "$channels" | jq '. | length' 2>/dev/null || echo "0")
    echo "Total: $channel_count canais"
else
    echo "  Erro ao obter canais ou jq n√£o dispon√≠vel"
fi

echo ""

# Verificar consumidores por fila
echo "üéØ Consumidores por fila:"
queues=("block-mined" "transaction-mined" "transaction-processed" "block-processed")

for queue in "${queues[@]}"; do
    echo "  üì¶ Fila: $queue"
    queue_info=$(rabbitmq_api "queues/%2F/$queue")
    
    if [ "$USE_JQ" = true ] && [ -n "$queue_info" ]; then
        # Usar valores padr√£o se jq retornar null ou vazio
        consumer_count=$(echo "$queue_info" | jq -r '.consumers // 0' 2>/dev/null)
        messages=$(echo "$queue_info" | jq -r '.messages // 0' 2>/dev/null)
        
        # Garantir que temos valores num√©ricos v√°lidos
        consumer_count=${consumer_count:-0}
        messages=${messages:-0}
        
        # Verificar se s√£o n√∫meros v√°lidos
        if ! [[ "$consumer_count" =~ ^[0-9]+$ ]]; then
            consumer_count=0
        fi
        if ! [[ "$messages" =~ ^[0-9]+$ ]]; then
            messages=0
        fi
        
        echo "    Consumidores: $consumer_count"
        echo "    Mensagens: $messages"
        
        # Verificar se h√° m√∫ltiplos consumidores (problema!)
        if [ "$consumer_count" -gt 1 ]; then
            echo "    ‚ö†Ô∏è ATEN√á√ÉO: M√∫ltiplos consumidores detectados!"
        elif [ "$consumer_count" -eq 1 ]; then
            echo "    ‚úÖ OK: 1 consumidor ativo"
        else
            echo "    ‚ö™ Nenhum consumidor ativo"
        fi
    else
        echo "    ‚ùå Erro ao obter informa√ß√µes da fila"
    fi
    echo ""
done

# Verificar detalhes dos consumidores
echo "üë• Detalhes dos consumidores:"
consumers_detail=$(rabbitmq_api "consumers")
if [ "$USE_JQ" = true ] && [ -n "$consumers_detail" ]; then
    # Verificar se h√° consumidores
    total_consumers=$(echo "$consumers_detail" | jq '. | length' 2>/dev/null || echo "0")
    
    if [ "$total_consumers" -gt 0 ]; then
        echo "$consumers_detail" | jq -r '.[] | "  ‚Ä¢ \(.consumer_tag) - Fila: \(.queue.name) - Canal: \(.channel_details.number)"' 2>/dev/null
        echo "Total de consumidores: $total_consumers"
        
        # Verificar duplica√ß√£o por consumer tag pattern
        echo ""
        echo "üîç An√°lise de duplica√ß√£o:"
        worker_consumers=$(echo "$consumers_detail" | jq -r '.[] | select(.consumer_tag | startswith("worker-")) | .consumer_tag' 2>/dev/null)
        if [ -n "$worker_consumers" ]; then
            echo "Consumidores worker detectados:"
            echo "$worker_consumers" | while read -r tag; do
                echo "  ‚Ä¢ $tag"
            done
            
            # Contar consumidores por fila
            for queue in "${queues[@]}"; do
                queue_consumers=$(echo "$consumers_detail" | jq -r ".[] | select(.queue.name == \"$queue\" and (.consumer_tag | startswith(\"worker-\"))) | .consumer_tag" 2>/dev/null)
                if [ -n "$queue_consumers" ]; then
                    count=$(echo "$queue_consumers" | wc -l)
                    if [ "$count" -gt 1 ]; then
                        echo "  ‚ö†Ô∏è PROBLEMA: $count consumidores na fila $queue"
                        echo "$queue_consumers" | sed 's/^/    - /'
                    fi
                fi
            done
        else
            echo "Nenhum consumidor worker encontrado"
        fi
    else
        echo "Nenhum consumidor ativo no momento"
    fi
else
    echo "‚ùå Erro ao obter detalhes dos consumidores"
fi

echo ""
echo "‚úÖ Verifica√ß√£o conclu√≠da"
echo ""
echo "üí° Dicas:"
echo "  ‚Ä¢ Se houver m√∫ltiplos consumidores na mesma fila, h√° duplica√ß√£o"
echo "  ‚Ä¢ Consumer tags √∫nicos ajudam a identificar inst√¢ncias espec√≠ficas"
echo "  ‚Ä¢ Durante hot-reload, consumidores antigos devem ser fechados"
echo ""
echo "üîó Links √∫teis:"
echo "  ‚Ä¢ RabbitMQ Management: http://$RABBITMQ_HOST:$RABBITMQ_PORT"
echo "  ‚Ä¢ Documenta√ß√£o: apps/worker/HOT_RELOAD_GUIDE.md" 