package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/big"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/hubweb3/worker/internal/application/services"
	"github.com/hubweb3/worker/internal/domain/entities"
	"github.com/hubweb3/worker/internal/domain/repositories"
	domainServices "github.com/hubweb3/worker/internal/domain/services"
	"github.com/hubweb3/worker/internal/queues"
	amqp "github.com/rabbitmq/amqp091-go"
)

// TransactionHandler processa transa√ß√µes dos blocos
type TransactionHandler struct {
	blockService                *domainServices.BlockService
	txRepo                      repositories.TransactionRepository
	ethClient                   *ethclient.Client
	consumer                    *queues.Consumer
	publisher                   *queues.Publisher
	transactionMethodService    *services.TransactionMethodService
	contractMetricsService      *services.SmartContractMetricsService
	accountTransactionProcessor *services.AccountTransactionProcessor
	processedCount              int64 // Contador de transa√ß√µes processadas
}

// NewTransactionHandler cria uma nova inst√¢ncia do handler de transa√ß√µes
func NewTransactionHandler(
	blockService *domainServices.BlockService,
	txRepo repositories.TransactionRepository,
	ethClient *ethclient.Client,
	consumer *queues.Consumer,
	publisher *queues.Publisher,
	transactionMethodService *services.TransactionMethodService,
	contractMetricsService *services.SmartContractMetricsService,
	accountTransactionProcessor *services.AccountTransactionProcessor,
) *TransactionHandler {
	return &TransactionHandler{
		blockService:                blockService,
		txRepo:                      txRepo,
		ethClient:                   ethClient,
		consumer:                    consumer,
		publisher:                   publisher,
		transactionMethodService:    transactionMethodService,
		contractMetricsService:      contractMetricsService,
		accountTransactionProcessor: accountTransactionProcessor,
	}
}

// Start inicia o processamento de transa√ß√µes
func (h *TransactionHandler) Start(ctx context.Context) error {
	log.Println("üîÑ Iniciando Transaction Handler...")

	// Loop principal com retry autom√°tico
	for {
		select {
		case <-ctx.Done():
			log.Println("üõë Transaction Handler encerrado")
			return nil
		default:
			if err := h.startConsumption(ctx); err != nil {
				log.Printf("‚ùå Erro no Transaction Handler: %v", err)
				log.Println("‚è≥ Aguardando 5 segundos antes de tentar novamente...")

				// Aguardar antes de tentar novamente
				select {
				case <-ctx.Done():
					log.Println("üõë Transaction Handler encerrado durante retry")
					return nil
				case <-time.After(5 * time.Second):
					continue
				}
			}
		}
	}
}

// startConsumption inicia o consumo de mensagens com tratamento de erro
func (h *TransactionHandler) startConsumption(ctx context.Context) error {
	// Declarar fila de transa√ß√µes mineradas
	if err := h.consumer.DeclareQueue(queues.TransactionMinedQueue); err != nil {
		return fmt.Errorf("erro ao declarar fila: %w", err)
	}

	// Consumir mensagens da fila 'transaction-mined'
	messages, err := h.consumer.Consume(queues.TransactionMinedQueue.Name)
	if err != nil {
		return fmt.Errorf("erro ao iniciar consumo: %w", err)
	}

	log.Printf("‚úÖ Transaction Handler iniciado, aguardando mensagens na fila '%s'", queues.TransactionMinedQueue.Name)

	for {
		select {
		case <-ctx.Done():
			return nil
		case msg, ok := <-messages:
			if !ok {
				log.Println("‚ö†Ô∏è Canal de mensagens fechado, reiniciando...")
				return fmt.Errorf("canal de mensagens fechado")
			}

			// Processar mensagem com acknowledgment manual
			if err := h.processTransactionMessage(msg); err != nil {
				log.Printf("‚ùå Erro ao processar transa√ß√£o: %v", err)
				// Rejeitar mensagem e reenviar para fila
				if nackErr := msg.Nack(false, true); nackErr != nil {
					log.Printf("‚ùå Erro ao fazer NACK da mensagem: %v", nackErr)
				}
			} else {
				// Confirmar processamento bem-sucedido
				if ackErr := msg.Ack(false); ackErr != nil {
					log.Printf("‚ö†Ô∏è Erro ao fazer ACK da mensagem: %v", ackErr)
				}
			}
		}
	}
}

// processTransactionMessage processa uma mensagem de transa√ß√£o
func (h *TransactionHandler) processTransactionMessage(msg amqp.Delivery) error {
	var txEvent struct {
		Hash        string `json:"hash"`
		BlockNumber uint64 `json:"block_number"`
		BlockHash   string `json:"block_hash"`
		From        string `json:"from"`
		To          string `json:"to"`
		Value       string `json:"value"`
		Gas         uint64 `json:"gas"`
		GasPrice    string `json:"gas_price"`
		Nonce       uint64 `json:"nonce"`
	}

	if err := json.Unmarshal(msg.Body, &txEvent); err != nil {
		log.Printf("‚ùå Erro ao deserializar mensagem de transa√ß√£o: %v", err)
		return err
	}

	// VALIDA√á√ÉO: Rejeitar mensagens com dados inv√°lidos
	if txEvent.Hash == "" {
		log.Printf("‚ö†Ô∏è Mensagem rejeitada: hash vazio. A mensagem ser√° descartada.")
		return nil
	}

	if txEvent.BlockHash == "" || txEvent.BlockNumber == 0 {
		log.Printf("‚ö†Ô∏è Mensagem rejeitada para tx %s: block_hash='%s', block_number=%d. A mensagem ser√° descartada.",
			txEvent.Hash, txEvent.BlockHash, txEvent.BlockNumber)
		return nil
	}

	// Verificar se a transa√ß√£o j√° existe no banco antes de processar
	exists, err := h.txRepo.Exists(context.Background(), txEvent.Hash)
	if err != nil {
		log.Printf("‚ùå Erro ao verificar exist√™ncia da transa√ß√£o %s: %v", txEvent.Hash, err)
		return err
	}

	if exists {
		log.Printf("‚úÖ Transa√ß√£o %s j√° existe no banco, pulando processamento", txEvent.Hash)
		return nil // N√£o √© erro, apenas pula o processamento
	}

	log.Printf("üí∞ [RECEBIDO] Transa√ß√£o: %s (bloco: %d, hash: %s)", txEvent.Hash, txEvent.BlockNumber, txEvent.BlockHash)

	// Buscar dados completos da transa√ß√£o com retry
	txHash := common.HexToHash(txEvent.Hash)

	var tx *types.Transaction
	var isPending bool

	// Tentar buscar a transa√ß√£o com retry (m√°ximo 3 tentativas)
	for attempt := 1; attempt <= 3; attempt++ {
		tx, isPending, err = h.ethClient.TransactionByHash(context.Background(), txHash)
		if err == nil {
			break
		}

		if attempt < 3 {
			log.Printf("‚è≥ Tentativa %d falhou para transa√ß√£o %s, tentando novamente em 1s...", attempt, txEvent.Hash)
			time.Sleep(1 * time.Second)
		}
	}

	if err != nil {
		log.Printf("‚ùå Erro ao buscar transa√ß√£o %s ap√≥s 3 tentativas: %v", txEvent.Hash, err)
		return fmt.Errorf("erro ao buscar transa√ß√£o ap√≥s 3 tentativas: %w", err)
	}

	if isPending {
		log.Printf("‚è≥ Transa√ß√£o %s ainda est√° pendente", txEvent.Hash)
		return nil
	}

	// Buscar receipt da transa√ß√£o com retry
	var receipt *types.Receipt
	for attempt := 1; attempt <= 3; attempt++ {
		receipt, err = h.ethClient.TransactionReceipt(context.Background(), txHash)
		if err == nil {
			break
		}

		if attempt < 3 {
			log.Printf("‚è≥ Tentativa %d falhou para receipt %s, tentando novamente em 1s...", attempt, txEvent.Hash)
			time.Sleep(1 * time.Second)
		}
	}

	if err != nil {
		log.Printf("‚ùå Erro ao buscar receipt %s ap√≥s 3 tentativas: %v", txEvent.Hash, err)
		return fmt.Errorf("erro ao buscar receipt ap√≥s 3 tentativas: %w", err)
	}

	// Buscar bloco para obter timestamp
	block, err := h.ethClient.BlockByHash(context.Background(), common.HexToHash(txEvent.BlockHash))
	if err != nil {
		// Se n√£o conseguir buscar por hash, tentar por n√∫mero
		log.Printf("‚ö†Ô∏è Erro ao buscar bloco por hash %s, tentando por n√∫mero %d", txEvent.BlockHash, txEvent.BlockNumber)
		block, err = h.ethClient.BlockByNumber(context.Background(), big.NewInt(int64(txEvent.BlockNumber)))
		if err != nil {
			log.Printf("‚ùå Erro ao buscar bloco %d: %v", txEvent.BlockNumber, err)
			return fmt.Errorf("erro ao buscar bloco: %w", err)
		}
	}

	// Converter para entidade de dom√≠nio
	transaction := h.convertToTransaction(tx, receipt, block)

	// Salvar transa√ß√£o usando o reposit√≥rio diretamente
	if err := h.saveTransaction(context.Background(), transaction); err != nil {
		log.Printf("‚ùå Erro ao salvar transa√ß√£o %s: %v", txEvent.Hash, err)
		return err
	}

	// Identificar e salvar m√©todo da transa√ß√£o
	if err := h.identifyAndSaveTransactionMethod(context.Background(), tx, receipt, transaction); err != nil {
		log.Printf("‚ö†Ô∏è Erro ao identificar m√©todo da transa√ß√£o %s: %v", txEvent.Hash, err)
		// N√£o retornar erro para n√£o falhar o processamento da transa√ß√£o
	}

	// Atualizar m√©tricas de smart contracts
	if err := h.contractMetricsService.UpdateContractMetricsFromTransaction(context.Background(), transaction); err != nil {
		log.Printf("‚ö†Ô∏è Erro ao atualizar m√©tricas de smart contract para transa√ß√£o %s: %v", txEvent.Hash, err)
		// N√£o retornar erro para n√£o falhar o processamento da transa√ß√£o
	}

	// Processar dados de accounts relacionados √† transa√ß√£o
	if err := h.accountTransactionProcessor.ProcessTransaction(context.Background(), transaction); err != nil {
		log.Printf("‚ö†Ô∏è Erro ao processar dados de accounts para transa√ß√£o %s: %v", txEvent.Hash, err)
		// N√£o retornar erro para n√£o falhar o processamento da transa√ß√£o
	}

	// Incrementar contador
	h.processedCount++
	log.Printf("‚úÖ [SALVO] Transa√ß√£o %s salva com sucesso no banco (Total processadas: %d)", txEvent.Hash, h.processedCount)

	// Publicar evento de transa√ß√£o processada
	if err := h.publishTransactionProcessed(transaction); err != nil {
		log.Printf("‚ö†Ô∏è Erro ao publicar evento de transa√ß√£o processada: %v", err)
	}

	return nil
}

// saveTransaction salva a transa√ß√£o no banco de dados
func (h *TransactionHandler) saveTransaction(ctx context.Context, tx *entities.Transaction) error {
	log.Printf("üîÑ Salvando transa√ß√£o %s no banco de dados", tx.Hash)

	// Verificar se a transa√ß√£o j√° existe
	exists, err := h.txRepo.Exists(ctx, tx.Hash)
	if err != nil {
		return err
	}

	if exists {
		log.Printf("‚ö†Ô∏è Transa√ß√£o %s j√° existe, atualizando...", tx.Hash)
		if err := h.txRepo.Update(ctx, tx); err != nil {
			// Se o erro for de constraint de duplicata, apenas logar e continuar
			if strings.Contains(err.Error(), "unique_tx_per_block") {
				log.Printf("‚ö†Ô∏è Transa√ß√£o %s j√° existe com mesmo block_hash e transaction_index, ignorando...", tx.Hash)
				return nil
			}
			return err
		}
		return nil
	}

	// Salvar nova transa√ß√£o
	if err := h.txRepo.Save(ctx, tx); err != nil {
		// Se o erro for de constraint de duplicata, apenas logar e continuar
		if strings.Contains(err.Error(), "unique_tx_per_block") {
			log.Printf("‚ö†Ô∏è Transa√ß√£o %s j√° existe com mesmo block_hash e transaction_index, ignorando...", tx.Hash)
			return nil
		}
		return err
	}

	return nil
}

// convertToTransaction converte dados da blockchain para entidade de dom√≠nio
func (h *TransactionHandler) convertToTransaction(tx *types.Transaction, receipt *types.Receipt, block *types.Block) *entities.Transaction {
	var fromAddr string
	var toAddr *string

	// Extrair endere√ßo do remetente
	if from, err := types.Sender(types.NewEIP155Signer(tx.ChainId()), tx); err == nil {
		fromAddr = from.Hex()
	}

	// Endere√ßo do destinat√°rio
	if tx.To() != nil {
		addr := tx.To().Hex()
		toAddr = &addr
	}

	// Determinar status
	status := entities.StatusSuccess
	if receipt.Status == 0 {
		status = entities.StatusFailed
	}

	// Calcular taxas
	gasPrice := tx.GasPrice()
	var maxFeePerGas, maxPriorityFeePerGas *big.Int

	if tx.Type() == types.DynamicFeeTxType {
		maxFeePerGas = tx.GasFeeCap()
		maxPriorityFeePerGas = tx.GasTipCap()
	}

	// Endere√ßo do contrato criado (se aplic√°vel)
	var contractAddress *string
	if receipt.ContractAddress != (common.Address{}) {
		addr := receipt.ContractAddress.Hex()
		contractAddress = &addr
	}

	// Converter valores
	blockNumber := block.Number().Uint64()
	blockHash := block.Hash().Hex()
	txIndex := uint64(receipt.TransactionIndex)
	gasUsed := receipt.GasUsed
	minedAt := time.Unix(int64(block.Time()), 0)

	return &entities.Transaction{
		Hash:                 tx.Hash().Hex(),
		BlockNumber:          &blockNumber,
		BlockHash:            &blockHash,
		TransactionIndex:     &txIndex,
		From:                 fromAddr,
		To:                   toAddr,
		Value:                tx.Value(),
		Gas:                  tx.Gas(),
		GasUsed:              &gasUsed,
		GasPrice:             gasPrice,
		MaxFeePerGas:         maxFeePerGas,
		MaxPriorityFeePerGas: maxPriorityFeePerGas,
		Data:                 tx.Data(),
		Nonce:                tx.Nonce(),
		Status:               status,
		Type:                 uint8(tx.Type()),
		ContractAddress:      contractAddress,
		LogsBloom:            receipt.Bloom.Bytes(),
		MinedAt:              &minedAt,
		CreatedAt:            time.Now(),
		UpdatedAt:            time.Now(),
	}
}

// publishTransactionProcessed publica evento de transa√ß√£o processada
func (h *TransactionHandler) publishTransactionProcessed(tx *entities.Transaction) error {
	event := map[string]interface{}{
		"type":        "transaction-processed",
		"hash":        tx.Hash,
		"blockNumber": tx.BlockNumber,
		"from":        tx.From,
		"to":          tx.To,
		"value":       tx.Value.String(),
		"gasUsed":     tx.GasUsed,
		"status":      string(tx.Status),
		"timestamp":   tx.MinedAt.Unix(),
	}

	eventData, err := json.Marshal(event)
	if err != nil {
		return err
	}

	return h.publisher.Publish("transaction-processed", eventData)
}

// identifyAndSaveTransactionMethod identifica e salva o m√©todo da transa√ß√£o
func (h *TransactionHandler) identifyAndSaveTransactionMethod(ctx context.Context, tx *types.Transaction, receipt *types.Receipt, transaction *entities.Transaction) error {
	log.Printf("üîç Identificando m√©todo da transa√ß√£o %s...", transaction.Hash)

	// Preparar valores para identifica√ß√£o
	var toAddress *string
	if tx.To() != nil {
		addr := tx.To().Hex()
		toAddress = &addr
	}

	var contractAddress *string
	if receipt.ContractAddress != (common.Address{}) {
		addr := receipt.ContractAddress.Hex()
		contractAddress = &addr
	}

	// Identificar m√©todo
	method, err := h.transactionMethodService.IdentifyTransactionMethod(
		ctx,
		&transaction.Hash,
		&transaction.From,
		toAddress,
		tx.Value().Bytes(),
		tx.Data(),
		contractAddress,
	)
	if err != nil {
		return fmt.Errorf("erro ao identificar m√©todo: %w", err)
	}

	// Salvar m√©todo identificado
	if err := h.transactionMethodService.SaveTransactionMethod(ctx, method); err != nil {
		return fmt.Errorf("erro ao salvar m√©todo: %w", err)
	}

	log.Printf("‚úÖ M√©todo identificado para transa√ß√£o %s: %s (%s)", transaction.Hash, method.MethodName, method.MethodType)
	return nil
}
