package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/hubweb3/worker/internal/queues"
	amqp "github.com/rabbitmq/amqp091-go"
)

// PendingTxHandler processa transa√ß√µes pendentes do mempool
type PendingTxHandler struct {
	consumer  *queues.Consumer
	publisher *queues.Publisher
}

// NewPendingTxHandler cria uma nova inst√¢ncia do handler de transa√ß√µes pendentes
func NewPendingTxHandler(consumer *queues.Consumer, publisher *queues.Publisher) *PendingTxHandler {
	return &PendingTxHandler{
		consumer:  consumer,
		publisher: publisher,
	}
}

// PendingTxJob representa um job de transa√ß√£o pendente
type PendingTxJob struct {
	Hash string `json:"hash"`
}

// Start inicia o processamento de transa√ß√µes pendentes
func (h *PendingTxHandler) Start(ctx context.Context) error {
	log.Println("üîÑ Iniciando Pending Transaction Handler...")

	// Loop principal com retry autom√°tico
	for {
		select {
		case <-ctx.Done():
			log.Println("üõë Pending Transaction Handler encerrado")
			return nil
		default:
			if err := h.startConsumption(ctx); err != nil {
				log.Printf("‚ùå Erro no Pending Transaction Handler: %v", err)
				log.Println("‚è≥ Aguardando 5 segundos antes de tentar novamente...")

				// Aguardar antes de tentar novamente
				select {
				case <-ctx.Done():
					log.Println("üõë Pending Transaction Handler encerrado durante retry")
					return nil
				case <-time.After(5 * time.Second):
					continue
				}
			}
		}
	}
}

// startConsumption inicia o consumo de mensagens com tratamento de erro
func (h *PendingTxHandler) startConsumption(ctx context.Context) error {
	// Declarar fila de transa√ß√µes pendentes
	if err := h.consumer.DeclareQueue(queues.PendingTxQueue); err != nil {
		return fmt.Errorf("erro ao declarar fila: %w", err)
	}

	// Consumir mensagens da fila 'pending-tx'
	messages, err := h.consumer.Consume(queues.PendingTxQueue.Name)
	if err != nil {
		return fmt.Errorf("erro ao iniciar consumo: %w", err)
	}

	log.Printf("‚úÖ Pending Transaction Handler iniciado, aguardando mensagens na fila '%s'", queues.PendingTxQueue.Name)

	for {
		select {
		case <-ctx.Done():
			return nil
		case msg, ok := <-messages:
			if !ok {
				log.Println("‚ö†Ô∏è Canal de mensagens fechado, reiniciando...")
				return fmt.Errorf("canal de mensagens fechado")
			}

			// Processar mensagem com acknowledgment manual
			if err := h.processPendingTxMessage(msg); err != nil {
				log.Printf("‚ùå Erro ao processar transa√ß√£o pendente: %v", err)
				// Rejeitar mensagem e reenviar para fila
				if nackErr := msg.Nack(false, true); nackErr != nil {
					log.Printf("‚ùå Erro ao fazer NACK da mensagem: %v", nackErr)
				}
			} else {
				// Confirmar processamento bem-sucedido
				if ackErr := msg.Ack(false); ackErr != nil {
					log.Printf("‚ö†Ô∏è Erro ao fazer ACK da mensagem: %v", ackErr)
				}
			}
		}
	}
}

// processPendingTxMessage processa uma mensagem de transa√ß√£o pendente
func (h *PendingTxHandler) processPendingTxMessage(msg amqp.Delivery) error {
	var pendingTx PendingTxJob
	if err := json.Unmarshal(msg.Body, &pendingTx); err != nil {
		log.Printf("‚ùå Erro ao deserializar mensagem de transa√ß√£o pendente: %v", err)
		return err
	}

	// VALIDA√á√ÉO: Rejeitar mensagens com dados inv√°lidos
	if pendingTx.Hash == "" {
		log.Printf("‚ö†Ô∏è Mensagem rejeitada: hash vazio. A mensagem ser√° descartada.")
		return nil
	}

	log.Printf("‚è≥ [PENDENTE] Transa√ß√£o: %s", pendingTx.Hash)

	// Por enquanto, apenas logamos a transa√ß√£o pendente
	// No futuro, podemos implementar funcionalidades como:
	// - Tracking de tempo na mempool
	// - An√°lise de gas price
	// - Detec√ß√£o de transa√ß√µes stuck
	// - Notifica√ß√µes para usu√°rios

	log.Printf("‚úÖ Transa√ß√£o pendente processada: %s", pendingTx.Hash)
	return nil
}
