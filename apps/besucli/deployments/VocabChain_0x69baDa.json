{
  "address": "0x69baDaF479aeD3Dc4C9943017819E19901409C4C",
  "creation_block_number": 1254424,
  "creator_address": "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73",
  "deployment": {
    "name": "VocabChain",
    "symbol": "VCHAIN",
    "description": "Smart Contract para registro e acompanhamento de estudos de ingles",
    "contract_type": "Learning",
    "source_code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/**\n * @title VocabChain\n * @author VocabChain Team\n * @notice Smart contract for tracking vocabulary learning progress on blockchain\n * @dev Implements modern Solidity patterns with events, custom errors, and efficient storage\n */\ncontract VocabChain {\n    // =============================================================\n    //                          CONSTANTS\n    // =============================================================\n\n    uint256 public constant MAX_LEVEL = 100;\n    uint256 public constant WORDS_PER_LEVEL = 50;\n    uint256 public constant STREAK_MULTIPLIER = 2;\n    uint256 public constant PERFECT_SCORE_BONUS = 10;\n\n    // =============================================================\n    //                       CUSTOM ERRORS\n    // =============================================================\n\n    error VocabChain__UserNotRegistered();\n    error VocabChain__InvalidLevel(uint256 provided, uint256 max);\n    error VocabChain__InvalidScore(uint256 provided, uint256 max);\n    error VocabChain__AlreadyRegistered();\n    error VocabChain__UnauthorizedAccess();\n    error VocabChain__InvalidDifficulty();\n    error VocabChain__SessionAlreadyStarted();\n    error VocabChain__NoActiveSession();\n    error VocabChain__InvalidWordCount();\n\n    // =============================================================\n    //                           ENUMS\n    // =============================================================\n\n    enum Difficulty {\n        BEGINNER, // 0\n        ELEMENTARY, // 1\n        INTERMEDIATE, // 2\n        ADVANCED, // 3\n        EXPERT // 4\n    }\n\n    enum AchievementType {\n        FIRST_WORD,\n        STREAK_7,\n        STREAK_30,\n        PERFECT_SESSION,\n        LEVEL_UP,\n        VOCABULARY_MASTER\n    }\n\n    // =============================================================\n    //                          STRUCTS\n    // =============================================================\n\n    struct UserProfile {\n        bool isRegistered;\n        string username;\n        uint256 currentLevel;\n        uint256 totalWordsLearned;\n        uint256 currentStreak;\n        uint256 longestStreak;\n        uint256 totalSessions;\n        uint256 totalCorrectAnswers;\n        uint256 totalIncorrectAnswers;\n        Difficulty currentDifficulty;\n        uint256 registrationTimestamp;\n        uint256 lastActiveTimestamp;\n    }\n\n    struct StudySession {\n        uint256 sessionId;\n        address user;\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 wordsStudied;\n        uint256 correctAnswers;\n        uint256 incorrectAnswers;\n        Difficulty difficulty;\n        bool isCompleted;\n        uint256 scoreEarned;\n    }\n\n    struct Achievement {\n        AchievementType achievementType;\n        uint256 timestamp;\n        string description;\n        uint256 pointsAwarded;\n    }\n\n    struct WordProgress {\n        uint256 timesStudied;\n        uint256 correctAttempts;\n        uint256 incorrectAttempts;\n        uint256 lastStudiedTimestamp;\n        bool isMastered;\n    }\n\n    // =============================================================\n    //                         STORAGE\n    // =============================================================\n\n    mapping(address =\u003e UserProfile) private s_userProfiles;\n    mapping(address =\u003e StudySession) private s_activeSessions;\n    mapping(address =\u003e Achievement[]) private s_userAchievements;\n    mapping(address =\u003e mapping(string =\u003e WordProgress)) private s_wordProgress;\n    mapping(uint256 =\u003e StudySession) private s_completedSessions;\n\n    address[] private s_registeredUsers;\n    uint256 private s_nextSessionId = 1;\n    uint256 private s_totalSessionsCompleted;\n\n    // =============================================================\n    //                          EVENTS\n    // =============================================================\n\n    event UserRegistered(\n        address indexed user,\n        string username,\n        Difficulty difficulty,\n        uint256 timestamp\n    );\n\n    event SessionStarted(\n        address indexed user,\n        uint256 indexed sessionId,\n        Difficulty difficulty,\n        uint256 timestamp\n    );\n\n    event SessionCompleted(\n        address indexed user,\n        uint256 indexed sessionId,\n        uint256 wordsStudied,\n        uint256 correctAnswers,\n        uint256 scoreEarned,\n        uint256 timestamp\n    );\n\n    event WordStudied(\n        address indexed user,\n        string indexed wordHash,\n        bool correct,\n        uint256 timestamp\n    );\n\n    event LevelUp(\n        address indexed user,\n        uint256 previousLevel,\n        uint256 newLevel,\n        uint256 timestamp\n    );\n\n    event AchievementUnlocked(\n        address indexed user,\n        AchievementType indexed achievementType,\n        string description,\n        uint256 pointsAwarded,\n        uint256 timestamp\n    );\n\n    event StreakUpdated(\n        address indexed user,\n        uint256 newStreak,\n        bool isNewRecord,\n        uint256 timestamp\n    );\n\n    event DifficultyChanged(\n        address indexed user,\n        Difficulty previousDifficulty,\n        Difficulty newDifficulty,\n        uint256 timestamp\n    );\n\n    // =============================================================\n    //                        MODIFIERS\n    // =============================================================\n\n    modifier onlyRegistered() {\n        if (!s_userProfiles[msg.sender].isRegistered) {\n            revert VocabChain__UserNotRegistered();\n        }\n        _;\n    }\n\n    modifier validDifficulty(Difficulty _difficulty) {\n        if (uint8(_difficulty) \u003e uint8(Difficulty.EXPERT)) {\n            revert VocabChain__InvalidDifficulty();\n        }\n        _;\n    }\n\n    // =============================================================\n    //                    USER MANAGEMENT\n    // =============================================================\n\n    /**\n     * @notice Register a new user in the VocabChain system\n     * @param _username Unique username for the user\n     * @param _difficulty Starting difficulty level\n     */\n    function registerUser(\n        string calldata _username,\n        Difficulty _difficulty\n    ) external validDifficulty(_difficulty) {\n        if (s_userProfiles[msg.sender].isRegistered) {\n            revert VocabChain__AlreadyRegistered();\n        }\n\n        s_userProfiles[msg.sender] = UserProfile({\n            isRegistered: true,\n            username: _username,\n            currentLevel: 1,\n            totalWordsLearned: 0,\n            currentStreak: 0,\n            longestStreak: 0,\n            totalSessions: 0,\n            totalCorrectAnswers: 0,\n            totalIncorrectAnswers: 0,\n            currentDifficulty: _difficulty,\n            registrationTimestamp: block.timestamp,\n            lastActiveTimestamp: block.timestamp\n        });\n\n        s_registeredUsers.push(msg.sender);\n\n        // Award first achievement\n        _unlockAchievement(\n            msg.sender,\n            AchievementType.FIRST_WORD,\n            \"Welcome to VocabChain!\",\n            10\n        );\n\n        emit UserRegistered(\n            msg.sender,\n            _username,\n            _difficulty,\n            block.timestamp\n        );\n    }\n\n    // =============================================================\n    //                    SESSION MANAGEMENT\n    // =============================================================\n\n    /**\n     * @notice Start a new study session\n     * @param _difficulty Difficulty level for this session\n     */\n    function startSession(\n        Difficulty _difficulty\n    ) external onlyRegistered validDifficulty(_difficulty) {\n        if (s_activeSessions[msg.sender].sessionId != 0) {\n            revert VocabChain__SessionAlreadyStarted();\n        }\n\n        uint256 sessionId = s_nextSessionId++;\n\n        s_activeSessions[msg.sender] = StudySession({\n            sessionId: sessionId,\n            user: msg.sender,\n            startTimestamp: block.timestamp,\n            endTimestamp: 0,\n            wordsStudied: 0,\n            correctAnswers: 0,\n            incorrectAnswers: 0,\n            difficulty: _difficulty,\n            isCompleted: false,\n            scoreEarned: 0\n        });\n\n        // Update user's last active timestamp\n        s_userProfiles[msg.sender].lastActiveTimestamp = block.timestamp;\n\n        emit SessionStarted(\n            msg.sender,\n            sessionId,\n            _difficulty,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Record a word study attempt during active session\n     * @param _wordHash Keccak256 hash of the word studied\n     * @param _correct Whether the answer was correct\n     */\n    function recordWordStudy(\n        string calldata _wordHash,\n        bool _correct\n    ) external onlyRegistered {\n        StudySession storage session = s_activeSessions[msg.sender];\n        if (session.sessionId == 0) {\n            revert VocabChain__NoActiveSession();\n        }\n\n        // Update session stats\n        session.wordsStudied++;\n        if (_correct) {\n            session.correctAnswers++;\n        } else {\n            session.incorrectAnswers++;\n        }\n\n        // Update word progress\n        WordProgress storage wordProgress = s_wordProgress[msg.sender][\n            _wordHash\n        ];\n        wordProgress.timesStudied++;\n        wordProgress.lastStudiedTimestamp = block.timestamp;\n\n        if (_correct) {\n            wordProgress.correctAttempts++;\n            // Mark as mastered if answered correctly 3 times\n            if (\n                wordProgress.correctAttempts \u003e= 3 \u0026\u0026\n                wordProgress.correctAttempts \u003e wordProgress.incorrectAttempts\n            ) {\n                wordProgress.isMastered = true;\n            }\n        } else {\n            wordProgress.incorrectAttempts++;\n            wordProgress.isMastered = false; // Reset mastery on incorrect answer\n        }\n\n        emit WordStudied(msg.sender, _wordHash, _correct, block.timestamp);\n    }\n\n    /**\n     * @notice Complete the current study session\n     */\n    function completeSession() external onlyRegistered {\n        StudySession storage session = s_activeSessions[msg.sender];\n        if (session.sessionId == 0) {\n            revert VocabChain__NoActiveSession();\n        }\n\n        if (session.wordsStudied == 0) {\n            revert VocabChain__InvalidWordCount();\n        }\n\n        // Calculate score\n        uint256 baseScore = session.correctAnswers * 10;\n        uint256 accuracyBonus = 0;\n\n        if (session.wordsStudied \u003e 0) {\n            uint256 accuracy = (session.correctAnswers * 100) /\n                session.wordsStudied;\n            if (accuracy == 100) {\n                accuracyBonus = PERFECT_SCORE_BONUS;\n                _unlockAchievement(\n                    msg.sender,\n                    AchievementType.PERFECT_SESSION,\n                    \"Perfect Session!\",\n                    50\n                );\n            }\n        }\n\n        uint256 streakBonus = s_userProfiles[msg.sender].currentStreak *\n            STREAK_MULTIPLIER;\n        session.scoreEarned = baseScore + accuracyBonus + streakBonus;\n\n        // Mark session as completed\n        session.endTimestamp = block.timestamp;\n        session.isCompleted = true;\n\n        // Update user profile\n        UserProfile storage user = s_userProfiles[msg.sender];\n        user.totalWordsLearned += session.wordsStudied;\n        user.totalCorrectAnswers += session.correctAnswers;\n        user.totalIncorrectAnswers += session.incorrectAnswers;\n        user.totalSessions++;\n        user.lastActiveTimestamp = block.timestamp;\n\n        // Update streak\n        _updateStreak(msg.sender, session.correctAnswers \u003e 0);\n\n        // Check for level up\n        _checkLevelUp(msg.sender);\n\n        // Store completed session\n        s_completedSessions[session.sessionId] = session;\n        s_totalSessionsCompleted++;\n\n        emit SessionCompleted(\n            msg.sender,\n            session.sessionId,\n            session.wordsStudied,\n            session.correctAnswers,\n            session.scoreEarned,\n            block.timestamp\n        );\n\n        // Clear active session\n        delete s_activeSessions[msg.sender];\n    }\n\n    // =============================================================\n    //                    INTERNAL FUNCTIONS\n    // =============================================================\n\n    /**\n     * @dev Update user's streak based on session performance\n     */\n    function _updateStreak(address _user, bool _hasCorrectAnswers) internal {\n        UserProfile storage user = s_userProfiles[_user];\n        bool isNewRecord = false;\n\n        if (_hasCorrectAnswers) {\n            user.currentStreak++;\n            if (user.currentStreak \u003e user.longestStreak) {\n                user.longestStreak = user.currentStreak;\n                isNewRecord = true;\n            }\n\n            // Check for streak achievements\n            if (user.currentStreak == 7) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.STREAK_7,\n                    \"7 Day Streak!\",\n                    100\n                );\n            } else if (user.currentStreak == 30) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.STREAK_30,\n                    \"30 Day Streak Master!\",\n                    500\n                );\n            }\n        } else {\n            user.currentStreak = 0;\n        }\n\n        emit StreakUpdated(\n            _user,\n            user.currentStreak,\n            isNewRecord,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Check if user should level up based on words learned\n     */\n    function _checkLevelUp(address _user) internal {\n        UserProfile storage user = s_userProfiles[_user];\n        uint256 expectedLevel = (user.totalWordsLearned / WORDS_PER_LEVEL) + 1;\n\n        if (expectedLevel \u003e user.currentLevel \u0026\u0026 expectedLevel \u003c= MAX_LEVEL) {\n            uint256 previousLevel = user.currentLevel;\n            user.currentLevel = expectedLevel;\n\n            _unlockAchievement(\n                _user,\n                AchievementType.LEVEL_UP,\n                string(\n                    abi.encodePacked(\n                        \"Reached Level \",\n                        _toString(expectedLevel),\n                        \"!\"\n                    )\n                ),\n                expectedLevel * 25\n            );\n\n            // Check for vocabulary master achievement\n            if (expectedLevel \u003e= MAX_LEVEL) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.VOCABULARY_MASTER,\n                    \"Vocabulary Master - Maximum Level Reached!\",\n                    1000\n                );\n            }\n\n            emit LevelUp(_user, previousLevel, expectedLevel, block.timestamp);\n        }\n    }\n\n    /**\n     * @dev Unlock achievement for user\n     */\n    function _unlockAchievement(\n        address _user,\n        AchievementType _type,\n        string memory _description,\n        uint256 _points\n    ) internal {\n        Achievement memory newAchievement = Achievement({\n            achievementType: _type,\n            timestamp: block.timestamp,\n            description: _description,\n            pointsAwarded: _points\n        });\n\n        s_userAchievements[_user].push(newAchievement);\n\n        emit AchievementUnlocked(\n            _user,\n            _type,\n            _description,\n            _points,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Convert uint256 to string\n     */\n    function _toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    // =============================================================\n    //                      VIEW FUNCTIONS\n    // =============================================================\n\n    /**\n     * @notice Get user profile information\n     * @param _user Address of the user\n     * @return UserProfile struct\n     */\n    function getUserProfile(\n        address _user\n    ) external view returns (UserProfile memory) {\n        return s_userProfiles[_user];\n    }\n\n    /**\n     * @notice Get user's active session\n     * @param _user Address of the user\n     * @return StudySession struct\n     */\n    function getActiveSession(\n        address _user\n    ) external view returns (StudySession memory) {\n        return s_activeSessions[_user];\n    }\n\n    /**\n     * @notice Get user's achievements\n     * @param _user Address of the user\n     * @return Array of Achievement structs\n     */\n    function getUserAchievements(\n        address _user\n    ) external view returns (Achievement[] memory) {\n        return s_userAchievements[_user];\n    }\n\n    /**\n     * @notice Get word progress for specific user and word\n     * @param _user Address of the user\n     * @param _wordHash Hash of the word\n     * @return WordProgress struct\n     */\n    function getWordProgress(\n        address _user,\n        string calldata _wordHash\n    ) external view returns (WordProgress memory) {\n        return s_wordProgress[_user][_wordHash];\n    }\n\n    /**\n     * @notice Get completed session by ID\n     * @param _sessionId ID of the session\n     * @return StudySession struct\n     */\n    function getCompletedSession(\n        uint256 _sessionId\n    ) external view returns (StudySession memory) {\n        return s_completedSessions[_sessionId];\n    }\n\n    /**\n     * @notice Get total number of registered users\n     * @return Number of registered users\n     */\n    function getTotalUsers() external view returns (uint256) {\n        return s_registeredUsers.length;\n    }\n\n    /**\n     * @notice Get total number of completed sessions\n     * @return Number of completed sessions\n     */\n    function getTotalCompletedSessions() external view returns (uint256) {\n        return s_totalSessionsCompleted;\n    }\n\n    /**\n     * @notice Check if user is registered\n     * @param _user Address to check\n     * @return Boolean indicating registration status\n     */\n    function isUserRegistered(address _user) external view returns (bool) {\n        return s_userProfiles[_user].isRegistered;\n    }\n}\n",
    "abi": [
      {
        "inputs": [],
        "name": "VocabChain__AlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__InvalidDifficulty",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "provided",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max",
            "type": "uint256"
          }
        ],
        "name": "VocabChain__InvalidLevel",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "provided",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max",
            "type": "uint256"
          }
        ],
        "name": "VocabChain__InvalidScore",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__InvalidWordCount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__NoActiveSession",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__SessionAlreadyStarted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__UnauthorizedAccess",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__UserNotRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "enum VocabChain.AchievementType",
            "name": "achievementType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "description",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "pointsAwarded",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "AchievementUnlocked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "previousDifficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "newDifficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "DifficultyChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousLevel",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newLevel",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "LevelUp",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "sessionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "wordsStudied",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "correctAnswers",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "scoreEarned",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "SessionCompleted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "sessionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "difficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "SessionStarted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newStreak",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "isNewRecord",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "StreakUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "difficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "UserRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "wordHash",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "correct",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "WordStudied",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "MAX_LEVEL",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PERFECT_SCORE_BONUS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STREAK_MULTIPLIER",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "WORDS_PER_LEVEL",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "completeSession",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getActiveSession",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "sessionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "wordsStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "difficulty",
                "type": "uint8"
              },
              {
                "internalType": "bool",
                "name": "isCompleted",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "scoreEarned",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.StudySession",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_sessionId",
            "type": "uint256"
          }
        ],
        "name": "getCompletedSession",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "sessionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "wordsStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "difficulty",
                "type": "uint8"
              },
              {
                "internalType": "bool",
                "name": "isCompleted",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "scoreEarned",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.StudySession",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getTotalCompletedSessions",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getTotalUsers",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserAchievements",
        "outputs": [
          {
            "components": [
              {
                "internalType": "enum VocabChain.AchievementType",
                "name": "achievementType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "pointsAwarded",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.Achievement[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserProfile",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "isRegistered",
                "type": "bool"
              },
              {
                "internalType": "string",
                "name": "username",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "currentLevel",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalWordsLearned",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "currentStreak",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "longestStreak",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalSessions",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalCorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalIncorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "currentDifficulty",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "registrationTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lastActiveTimestamp",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.UserProfile",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_wordHash",
            "type": "string"
          }
        ],
        "name": "getWordProgress",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "timesStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAttempts",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAttempts",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lastStudiedTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "isMastered",
                "type": "bool"
              }
            ],
            "internalType": "struct VocabChain.WordProgress",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "isUserRegistered",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_wordHash",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "_correct",
            "type": "bool"
          }
        ],
        "name": "recordWordStudy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "enum VocabChain.Difficulty",
            "name": "_difficulty",
            "type": "uint8"
          }
        ],
        "name": "registerUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "enum VocabChain.Difficulty",
            "name": "_difficulty",
            "type": "uint8"
          }
        ],
        "name": "startSession",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": "608060405260016006553480156013575f80fd5b506130cd806100215f395ff3fe608060405234801561000f575f80fd5b50600436106100fe575f3560e01c80639be572f611610095578063c4c8889c11610064578063c4c8889c146102ac578063d1588ee7146102dc578063f09153c4146102fa578063f139bda81461032a576100fe565b80639be572f6146102365780639d08c97414610254578063a49062d414610270578063badca51e1461028e576100fe565b80635cab4615116100d15780635cab46151461019c57806371d948e2146101ba578063887f6c1d146101d6578063987ee15614610206576100fe565b8063163f75221461010257806327ad972714610132578063338e12eb14610150578063351d64491461016c575b5f80fd5b61011c6004803603810190610117919061207d565b610334565b60405161012991906120c2565b60405180910390f35b61013a610387565b60405161014791906120f3565b60405180910390f35b61016a60048036038101906101659190612190565b61038c565b005b610186600480360381019061018191906121ed565b610719565b60405161019391906122ce565b60405180910390f35b6101a46107d1565b6040516101b191906120f3565b60405180910390f35b6101d460048036038101906101cf91906122e7565b6107da565b005b6101f060048036038101906101eb919061233c565b610b76565b6040516101fd91906124b3565b60405180910390f35b610220600480360381019061021b919061207d565b610c91565b60405161022d919061263e565b60405180910390f35b61023e610e25565b60405161024b91906120f3565b60405180910390f35b61026e60048036038101906102699190612688565b610e31565b005b61027861110a565b60405161028591906120f3565b60405180910390f35b61029661110f565b6040516102a391906120f3565b60405180910390f35b6102c660048036038101906102c1919061207d565b611114565b6040516102d391906124b3565b60405180910390f35b6102e461125b565b6040516102f191906120f3565b60405180910390f35b610314600480360381019061030f919061207d565b611260565b6040516103219190612846565b60405180910390f35b6103326113d6565b005b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff169050919050565b600281565b806004808111156103a05761039f612376565b5b60ff168160048111156103b6576103b5612376565b5b60ff1611156103f1576040517f0b6193bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff1615610473576040517f8e16a40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180610180016040528060011515815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508152602001600181526020015f81526020015f81526020015f81526020015f81526020015f81526020015f815260200183600481111561050f5761050e612376565b5b8152602001428152602001428152505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548160ff021916908315150217905550602082015181600101908161058c9190612a8d565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015f6101000a81548160ff021916908360048111156105ff576105fe612376565b5b021790555061014082015181600a015561016082015181600b0155905050600533908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106bf335f6040518060400160405280601681526020017f57656c636f6d6520746f20566f636162436861696e2100000000000000000000815250600a611976565b3373ffffffffffffffffffffffffffffffffffffffff167fe20b9b482e07c25b19f43796e724ce7c83ddf9ef501d7de45c19c2f444d45b318585854260405161070b9493929190612bb5565b60405180910390a250505050565b610721611f12565b60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20838360405161076e929190612c21565b90815260200160405180910390206040518060a00160405290815f8201548152602001600182015481526020016002820154815260200160038201548152602001600482015f9054906101000a900460ff16151515158152505090509392505050565b5f600754905090565b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff1661085b576040517f3f1cbc2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048081111561086f5761086e612376565b5b60ff1681600481111561088557610884612376565b5b60ff1611156108c0576040517f0b6193bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015414610938576040517f600119e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60065f81548092919061094b90612c66565b9190505590506040518061014001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020015f81526020015f81526020015f81526020015f81526020018460048111156109b0576109af612376565b5b81526020015f151581526020015f81525060015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015f6101000a81548160ff02191690836004811115610aa857610aa7612376565b5b02179055506101008201518160070160016101000a81548160ff0219169083151502179055506101208201518160080155905050425f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600b0181905550803373ffffffffffffffffffffffffffffffffffffffff167f89f4b1068c6332a669354bf23283c1f2961ae1feb0c454e0e37fe03dacf876b08542604051610b69929190612cad565b60405180910390a3505050565b610b7e611f3e565b60045f8381526020019081526020015f20604051806101400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015f9054906101000a900460ff166004811115610c4f57610c4e612376565b5b6004811115610c6157610c60612376565b5b81526020016007820160019054906101000a900460ff161515151581526020016008820154815250509050919050565b610c99611fb1565b5f808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20604051806101800160405290815f82015f9054906101000a900460ff16151515158152602001600182018054610d0a906128c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d36906128c0565b8015610d815780601f10610d5857610100808354040283529160200191610d81565b820191905f5260205f20905b815481529060010190602001808311610d6457829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982015f9054906101000a900460ff166004811115610df457610df3612376565b5b6004811115610e0657610e05612376565b5b8152602001600a8201548152602001600b820154815250509050919050565b5f600580549050905090565b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff16610eb2576040517f3f1cbc2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f815f015403610f2e576040517f91b8f10e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004015f815480929190610f4290612c66565b91905055508115610f6b57806005015f815480929190610f6190612c66565b9190505550610f85565b806006015f815480929190610f7f90612c66565b91905055505b5f60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208585604051610fd3929190612c21565b90815260200160405180910390209050805f015f815480929190610ff690612c66565b9190505550428160030181905550821561106657806001015f81548092919061101e90612c66565b9190505550600381600101541015801561103f575080600201548160010154115b15611061576001816004015f6101000a81548160ff0219169083151502179055505b61109b565b806002015f81548092919061107a90612c66565b91905055505f816004015f6101000a81548160ff0219169083151502179055505b84846040516110ab929190612c21565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f9946713a281c61c73de8aeb16f31cf3d5c7d87efcf086871111d3569e20ba0c885426040516110fb929190612cd4565b60405180910390a35050505050565b606481565b600a81565b61111c611f3e565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20604051806101400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015f9054906101000a900460ff16600481111561121957611218612376565b5b600481111561122b5761122a612376565b5b81526020016007820160019054906101000a900460ff161515151581526020016008820154815250509050919050565b603281565b606060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156113cb578382905f5260205f2090600402016040518060800160405290815f82015f9054906101000a900460ff16600581111561130257611301612376565b5b600581111561131457611313612376565b5b815260200160018201548152602001600282018054611332906128c0565b80601f016020809104026020016040519081016040528092919081815260200182805461135e906128c0565b80156113a95780601f10611380576101008083540402835291602001916113a9565b820191905f5260205f20905b81548152906001019060200180831161138c57829003601f168201915b50505050508152602001600382015481525050815260200190600101906112be565b505050509050919050565b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff16611457576040517f3f1cbc2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f815f0154036114d3576040517f91b8f10e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816004015403611510576040517f806c8f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f600a82600501546115229190612cfb565b90505f80836004015411156115a6575f8360040154606485600501546115489190612cfb565b6115529190612d69565b9050606481036115a457600a91506115a33360036040518060400160405280601081526020017f506572666563742053657373696f6e21000000000000000000000000000000008152506032611976565b5b505b5f60025f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600401546115f39190612cfb565b90508082846116029190612d99565b61160c9190612d99565b846008018190555042846003018190555060018460070160016101000a81548160ff0219169083151502179055505f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090508460040154816003015f8282546116909190612d99565b925050819055508460050154816007015f8282546116ae9190612d99565b925050819055508460060154816008015f8282546116cc9190612d99565b92505081905550806006015f8154809291906116e790612c66565b91905055504281600b0181905550611705335f876005015411611ad5565b61170e33611c67565b8460045f875f015481526020019081526020015f205f820154815f0155600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820154816002015560038201548160030155600482015481600401556005820154816005015560068201548160060155600782015f9054906101000a900460ff16816007015f6101000a81548160ff021916908360048111156117f8576117f7612376565b5b02179055506007820160019054906101000a900460ff168160070160016101000a81548160ff0219169083151502179055506008820154816008015590505060075f81548092919061184990612c66565b9190505550845f01543373ffffffffffffffffffffffffffffffffffffffff167fbc2e4e046e4eb6289738c19436b358cc81427f603f16af425bb672a2f9c7e414876004015488600501548960080154426040516118aa9493929190612dcc565b60405180910390a360015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f9055600582015f9055600682015f9055600782015f6101000a81549060ff02191690556007820160016101000a81549060ff0219169055600882015f905550505050505050565b5f604051806080016040528085600581111561199557611994612376565b5b815260200142815260200184815260200183815250905060025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f015f6101000a81548160ff02191690836005811115611a3857611a37612376565b5b0217905550602082015181600101556040820151816002019081611a5c9190612a8d565b50606082015181600301555050836005811115611a7c57611a7b612376565b5b8573ffffffffffffffffffffffffffffffffffffffff167f86b1075150cd6bbad768bdcea8baa18e68a6eeae0e379f6284a20fd3a8b5b105858542604051611ac693929190612e47565b60405180910390a35050505050565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f8215611c0157816004015f815480929190611b2f90612c66565b9190505550816005015482600401541115611b565781600401548260050181905550600190505b6007826004015403611baa57611ba58460016040518060400160405280600d81526020017f37204461792053747265616b21000000000000000000000000000000000000008152506064611976565b611bfc565b601e826004015403611bfb57611bfa8460026040518060400160405280601581526020017f3330204461792053747265616b204d61737465722100000000000000000000008152506101f4611976565b5b5b611c0b565b5f82600401819055505b8373ffffffffffffffffffffffffffffffffffffffff167f0819c2be362f91ccf2d9e14fdbcf704aaeab3c69f1e4132421ecdde5a32b5c4a83600401548342604051611c5993929190612e83565b60405180910390a250505050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f600160328360030154611cba9190612d69565b611cc49190612d99565b9050816002015481118015611cda575060648111155b15611db4575f82600201549050818360020181905550611d30846004611cff85611db9565b604051602001611d0f9190612f7c565b604051602081830303815290604052601986611d2b9190612cfb565b611976565b60648210611d6057611d5f8460056040518060600160405280602a815260200161306e602a91396103e8611976565b5b8373ffffffffffffffffffffffffffffffffffffffff167f0ee22ce17ae6ff55501ec7491afa3f5397a17ee7cd88fe56c39569e2c13bd918828442604051611daa93929190612fa8565b60405180910390a2505b505050565b60605f8203611dff576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f0d565b5f8290505f5b5f8214611e2e578080611e1790612c66565b915050600a82611e279190612d69565b9150611e05565b5f8167ffffffffffffffff811115611e4957611e48612866565b5b6040519080825280601f01601f191660200182016040528015611e7b5781602001600182028036833780820191505090505b5090505b5f8514611f0657600182611e939190612fdd565b9150600a85611ea29190613010565b6030611eae9190612d99565b60f81b818381518110611ec457611ec3613040565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a85611eff9190612d69565b9450611e7f565b8093505050505b919050565b6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f151581525090565b6040518061014001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6004811115611f9d57611f9c612376565b5b81526020015f151581526020015f81525090565b6040518061018001604052805f15158152602001606081526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f600481111561200957612008612376565b5b81526020015f81526020015f81525090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61204c82612023565b9050919050565b61205c81612042565b8114612066575f80fd5b50565b5f8135905061207781612053565b92915050565b5f602082840312156120925761209161201b565b5b5f61209f84828501612069565b91505092915050565b5f8115159050919050565b6120bc816120a8565b82525050565b5f6020820190506120d55f8301846120b3565b92915050565b5f819050919050565b6120ed816120db565b82525050565b5f6020820190506121065f8301846120e4565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261212d5761212c61210c565b5b8235905067ffffffffffffffff81111561214a57612149612110565b5b60208301915083600182028301111561216657612165612114565b5b9250929050565b60058110612179575f80fd5b50565b5f8135905061218a8161216d565b92915050565b5f805f604084860312156121a7576121a661201b565b5b5f84013567ffffffffffffffff8111156121c4576121c361201f565b5b6121d086828701612118565b935093505060206121e38682870161217c565b9150509250925092565b5f805f604084860312156122045761220361201b565b5b5f61221186828701612069565b935050602084013567ffffffffffffffff8111156122325761223161201f565b5b61223e86828701612118565b92509250509250925092565b612253816120db565b82525050565b612262816120a8565b82525050565b60a082015f82015161227c5f85018261224a565b50602082015161228f602085018261224a565b5060408201516122a2604085018261224a565b5060608201516122b5606085018261224a565b5060808201516122c86080850182612259565b50505050565b5f60a0820190506122e15f830184612268565b92915050565b5f602082840312156122fc576122fb61201b565b5b5f6123098482850161217c565b91505092915050565b61231b816120db565b8114612325575f80fd5b50565b5f8135905061233681612312565b92915050565b5f602082840312156123515761235061201b565b5b5f61235e84828501612328565b91505092915050565b61237081612042565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600581106123b4576123b3612376565b5b50565b5f8190506123c4826123a3565b919050565b5f6123d3826123b7565b9050919050565b6123e3816123c9565b82525050565b61014082015f8201516123fe5f85018261224a565b5060208201516124116020850182612367565b506040820151612424604085018261224a565b506060820151612437606085018261224a565b50608082015161244a608085018261224a565b5060a082015161245d60a085018261224a565b5060c082015161247060c085018261224a565b5060e082015161248360e08501826123da565b50610100820151612498610100850182612259565b506101208201516124ad61012085018261224a565b50505050565b5f610140820190506124c75f8301846123e9565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61250f826124cd565b61251981856124d7565b93506125298185602086016124e7565b612532816124f5565b840191505092915050565b5f61018083015f8301516125535f860182612259565b506020830151848203602086015261256b8282612505565b9150506040830151612580604086018261224a565b506060830151612593606086018261224a565b5060808301516125a6608086018261224a565b5060a08301516125b960a086018261224a565b5060c08301516125cc60c086018261224a565b5060e08301516125df60e086018261224a565b506101008301516125f461010086018261224a565b506101208301516126096101208601826123da565b5061014083015161261e61014086018261224a565b5061016083015161263361016086018261224a565b508091505092915050565b5f6020820190508181035f830152612656818461253d565b905092915050565b612667816120a8565b8114612671575f80fd5b50565b5f813590506126828161265e565b92915050565b5f805f6040848603121561269f5761269e61201b565b5b5f84013567ffffffffffffffff8111156126bc576126bb61201f565b5b6126c886828701612118565b935093505060206126db86828701612674565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6006811061271f5761271e612376565b5b50565b5f81905061272f8261270e565b919050565b5f61273e82612722565b9050919050565b61274e81612734565b82525050565b5f608083015f8301516127695f860182612745565b50602083015161277c602086018261224a565b50604083015184820360408601526127948282612505565b91505060608301516127a9606086018261224a565b508091505092915050565b5f6127bf8383612754565b905092915050565b5f602082019050919050565b5f6127dd826126e5565b6127e781856126ef565b9350836020820285016127f9856126ff565b805f5b85811015612834578484038952815161281585826127b4565b9450612820836127c7565b925060208a019950506001810190506127fc565b50829750879550505050505092915050565b5f6020820190508181035f83015261285e81846127d3565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806128d757607f821691505b6020821081036128ea576128e9612893565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261294c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612911565b6129568683612911565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61299161298c612987846120db565b61296e565b6120db565b9050919050565b5f819050919050565b6129aa83612977565b6129be6129b682612998565b84845461291d565b825550505050565b5f90565b6129d26129c6565b6129dd8184846129a1565b505050565b5b81811015612a00576129f55f826129ca565b6001810190506129e3565b5050565b601f821115612a4557612a16816128f0565b612a1f84612902565b81016020851015612a2e578190505b612a42612a3a85612902565b8301826129e2565b50505b505050565b5f82821c905092915050565b5f612a655f1984600802612a4a565b1980831691505092915050565b5f612a7d8383612a56565b9150826002028217905092915050565b612a96826124cd565b67ffffffffffffffff811115612aaf57612aae612866565b5b612ab982546128c0565b612ac4828285612a04565b5f60209050601f831160018114612af5575f8415612ae3578287015190505b612aed8582612a72565b865550612b54565b601f198416612b03866128f0565b5f5b82811015612b2a57848901518255600182019150602085019450602081019050612b05565b86831015612b475784890151612b43601f891682612a56565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b828183375f83830152505050565b5f612b858385612b5c565b9350612b92838584612b6c565b612b9b836124f5565b840190509392505050565b612baf816123c9565b82525050565b5f6060820190508181035f830152612bce818688612b7a565b9050612bdd6020830185612ba6565b612bea60408301846120e4565b95945050505050565b5f81905092915050565b5f612c088385612bf3565b9350612c15838584612b6c565b82840190509392505050565b5f612c2d828486612bfd565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c70826120db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ca257612ca1612c39565b5b600182019050919050565b5f604082019050612cc05f830185612ba6565b612ccd60208301846120e4565b9392505050565b5f604082019050612ce75f8301856120b3565b612cf460208301846120e4565b9392505050565b5f612d05826120db565b9150612d10836120db565b9250828202612d1e816120db565b91508282048414831517612d3557612d34612c39565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612d73826120db565b9150612d7e836120db565b925082612d8e57612d8d612d3c565b5b828204905092915050565b5f612da3826120db565b9150612dae836120db565b9250828201905080821115612dc657612dc5612c39565b5b92915050565b5f608082019050612ddf5f8301876120e4565b612dec60208301866120e4565b612df960408301856120e4565b612e0660608301846120e4565b95945050505050565b5f612e19826124cd565b612e238185612b5c565b9350612e338185602086016124e7565b612e3c816124f5565b840191505092915050565b5f6060820190508181035f830152612e5f8186612e0f565b9050612e6e60208301856120e4565b612e7b60408301846120e4565b949350505050565b5f606082019050612e965f8301866120e4565b612ea360208301856120b3565b612eb060408301846120e4565b949350505050565b7f52656163686564204c6576656c200000000000000000000000000000000000005f82015250565b5f612eec600e83612bf3565b9150612ef782612eb8565b600e82019050919050565b5f612f0c826124cd565b612f168185612bf3565b9350612f268185602086016124e7565b80840191505092915050565b7f21000000000000000000000000000000000000000000000000000000000000005f82015250565b5f612f66600183612bf3565b9150612f7182612f32565b600182019050919050565b5f612f8682612ee0565b9150612f928284612f02565b9150612f9d82612f5a565b915081905092915050565b5f606082019050612fbb5f8301866120e4565b612fc860208301856120e4565b612fd560408301846120e4565b949350505050565b5f612fe7826120db565b9150612ff2836120db565b925082820390508181111561300a57613009612c39565b5b92915050565b5f61301a826120db565b9150613025836120db565b92508261303557613034612d3c565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfe566f636162756c617279204d6173746572202d204d6178696d756d204c6576656c205265616368656421a26469706673582212209b32ae37331f20c52e99864643a87964ec2fcc271cc7976985558248148639ec64736f6c63430008190033",
    "constructor_args": null,
    "compiler_version": "v0.8.19",
    "optimization_enabled": true,
    "optimization_runs": 200,
    "license_type": "MIT",
    "tags": [],
    "metadata": {}
  },
  "gas_used": 2769895,
  "timestamp": "2025-09-11T05:45:08Z",
  "tx_hash": "0x2f4eac8216fed70d2ec720ee6332e270dbd4859de77a5d851a8c4a490702c40b"
}