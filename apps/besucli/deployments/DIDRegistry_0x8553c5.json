{
  "address": "0x8553c57aC9a666EAfC517Ffc4CF57e21d2D3a1cb",
  "creation_block_number": 242728,
  "creator_address": "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73",
  "deployment": {
    "name": "DIDRegistry",
    "symbol": "DID",
    "description": "Registro de Identidades Descentralizadas (DID) para cons√≥rcio Besu com controle de acesso baseado em roles",
    "contract_type": "DID-Registry",
    "source_code": "// Sources flattened with hardhat v3.0.0 https://hardhat.org\n\n// SPDX-License-Identifier: MIT\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/Context.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n\n// File npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity \u003e=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity \u003e=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n\n// File npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role =\u003e RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\n\n// File contracts/RegistryAccess.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n * @title RegistryAccess\n * @notice Base de acesso para o consorcio (roles + pausa).\n *\n * Roles:\n * - DEFAULT_ADMIN_ROLE: governanca do consorcio\n * - REGISTRAR_ROLE: operadores do registro DID (recovery/ajustes)\n * - ISSUER_ROLE: emissores autorizados a publicar StatusLists\n */\nabstract contract RegistryAccess is AccessControl, Pausable {\n    bytes32 public constant REGISTRAR_ROLE = keccak256(\"REGISTRAR_ROLE\");\n    bytes32 public constant ISSUER_ROLE    = keccak256(\"ISSUER_ROLE\");\n\n    constructor(address admin) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// Pausa/despausa por admin. Os eventos sao emitidos dentro de _pause/_unpause.\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n}\n\n// File contracts/DIDRegistry.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title DIDRegistry\n * @notice Registro simples de DID estilo EIP-1056 para consorcio Besu.\n *         - Controller por identidade (address)\n *         - Eventos de atributos para ancoragem (sem DCP)\n */\ncontract DIDRegistry is RegistryAccess {\n    /// @dev Ultimo bloco que mudou cada identidade (compatibilidade com indexacao)\n    mapping(address =\u003e uint256) public changed;\n\n    /// @dev Controlador atual de cada identidade (address DID)\n    mapping(address =\u003e address) public controllers;\n\n    /// @dev Ultima ancora armazenada por nome-\u003ehash(valor)\n    mapping(address =\u003e mapping(bytes32 =\u003e bytes32)) public lastAttrValueHash;\n\n    /// Eventos (compat EIP-1056-ish)\n    event DIDOwnerChanged(address indexed identity, address owner, uint256 previousChange);\n    event DIDAttributeChanged(\n        address indexed identity,\n        bytes32 name,\n        bytes value,         // valor completo no evento\n        uint256 validTo,     // timestamp/expiracao opcional\n        uint256 previousChange\n    );\n    event DIDAttributeRevoked(\n        address indexed identity,\n        bytes32 name,\n        bytes value,\n        uint256 previousChange\n    );\n\n    error NotController();\n    error ZeroAddress();\n    error Forbidden();\n\n    constructor(address admin) RegistryAccess(admin) {}\n\n    // ========= Helpers =========\n    function _isController(address identity, address caller) internal view returns (bool) {\n        address ctrl = controllers[identity];\n        return (ctrl == address(0) \u0026\u0026 caller == identity) || (ctrl != address(0) \u0026\u0026 caller == ctrl);\n    }\n\n    modifier onlyController(address identity) {\n        if (!_isController(identity, msg.sender)) revert NotController();\n        _;\n    }\n\n    // ========= Controller =========\n    function setController(address identity, address newController) external whenNotPaused onlyController(identity) {\n        if (newController == address(0)) revert ZeroAddress();\n        uint256 prev = changed[identity];\n        controllers[identity] = newController;\n        changed[identity] = block.number;\n        emit DIDOwnerChanged(identity, newController, prev);\n    }\n\n    /**\n     * @notice Recovery/ajuste de controlador pela governan√ßa (REGISTRAR_ROLE).\n     */\n    function adminSetController(address identity, address newController) external whenNotPaused onlyRole(REGISTRAR_ROLE) {\n        if (newController == address(0)) revert ZeroAddress();\n        uint256 prev = changed[identity];\n        controllers[identity] = newController;\n        changed[identity] = block.number;\n        emit DIDOwnerChanged(identity, newController, prev);\n    }\n\n    // ========= Atributos (anchor only, sem DCP) =========\n    function setAttribute(\n        address identity,\n        bytes32 name,\n        bytes calldata value,\n        uint256 validTo\n    ) external whenNotPaused onlyController(identity) {\n        uint256 prev = changed[identity];\n        changed[identity] = block.number;\n\n        // Armazena apenas hash para leitura rapida opcional\n        lastAttrValueHash[identity][name] = keccak256(value);\n\n        emit DIDAttributeChanged(identity, name, value, validTo, prev);\n    }\n\n    function revokeAttribute(\n        address identity,\n        bytes32 name,\n        bytes calldata value\n    ) external whenNotPaused onlyController(identity) {\n        uint256 prev = changed[identity];\n        changed[identity] = block.number;\n\n        // Zera hash se corresponder\n        bytes32 h = keccak256(value);\n        if (lastAttrValueHash[identity][name] == h) {\n            lastAttrValueHash[identity][name] = bytes32(0);\n        }\n\n        emit DIDAttributeRevoked(identity, name, value, prev);\n    }\n}\n\n\n\n",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AccessControlBadConfirmation",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "neededRole",
            "type": "bytes32"
          }
        ],
        "name": "AccessControlUnauthorizedAccount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EnforcedPause",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ExpectedPause",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Forbidden",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotController",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroAddress",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "name",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "validTo",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousChange",
            "type": "uint256"
          }
        ],
        "name": "DIDAttributeChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "name",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousChange",
            "type": "uint256"
          }
        ],
        "name": "DIDAttributeRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousChange",
            "type": "uint256"
          }
        ],
        "name": "DIDOwnerChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ISSUER_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "REGISTRAR_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "newController",
            "type": "address"
          }
        ],
        "name": "adminSetController",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "changed",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "controllers",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "lastAttrValueHash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "pause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "paused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "callerConfirmation",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "name",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "name": "revokeAttribute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "name",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "validTo",
            "type": "uint256"
          }
        ],
        "name": "setAttribute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "identity",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "newController",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unpause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": "608060405234801561000f575f80fd5b50604051611b1a380380611b1a83398181016040528101906100319190610209565b806100445f801b8261004c60201b60201c565b505050610234565b5f61005d838361014160201b60201c565b6101375760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506100d46101a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061013b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101d8826101af565b9050919050565b6101e8816101ce565b81146101f2575f80fd5b50565b5f81519050610203816101df565b92915050565b5f6020828403121561021e5761021d6101ab565b5b5f61022b848285016101f5565b91505092915050565b6118d9806102415f395ff3fe608060405234801561000f575f80fd5b506004361061011e575f3560e01c806382aefa24116100ab578063d547741f1161006f578063d547741f146102dc578063da8c229e146102f8578063efe50aeb14610328578063f68e955314610344578063f96d0f9f146103625761011e565b806382aefa24146102365780638456cb591461025457806385af83611461025e57806391d148541461028e578063a217fddf146102be5761011e565b806336568abe116100f257806336568abe146101ba5780633f4ba83a146101d65780635c975abb146101e05780637ad4b0a4146101fe5780637b7d6c681461021a5761011e565b8062c023da1461012257806301ffc9a71461013e578063248a9ca31461016e5780632f2ff15d1461019e575b5f80fd5b61013c600480360381019061013791906113c8565b610392565b005b6101586004803603810190610153919061148e565b61057d565b60405161016591906114d3565b60405180910390f35b610188600480360381019061018391906114ec565b6105f6565b6040516101959190611526565b60405180910390f35b6101b860048036038101906101b3919061153f565b610612565b005b6101d460048036038101906101cf919061153f565b610634565b005b6101de6106af565b005b6101e86106c6565b6040516101f591906114d3565b60405180910390f35b610218600480360381019061021391906115b0565b6106db565b005b610234600480360381019061022f9190611634565b61086e565b005b61023e610a70565b60405161024b9190611526565b60405180910390f35b61025c610a94565b005b61027860048036038101906102739190611672565b610aab565b6040516102859190611526565b60405180910390f35b6102a860048036038101906102a3919061153f565b610acb565b6040516102b591906114d3565b60405180910390f35b6102c6610b2e565b6040516102d39190611526565b60405180910390f35b6102f660048036038101906102f1919061153f565b610b34565b005b610312600480360381019061030d91906116b0565b610b56565b60405161031f91906116ea565b60405180910390f35b610342600480360381019061033d9190611634565b610b86565b005b61034c610d71565b6040516103599190611526565b60405180910390f35b61037c600480360381019061037791906116b0565b610d95565b6040516103899190611712565b60405180910390f35b61039a610daa565b836103a58133610deb565b6103db576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490504360025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f848460405161046f929190611767565b604051809103902090508060045f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f205403610520575f801b60045f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f20819055505b8673ffffffffffffffffffffffffffffffffffffffff167ff57b884cdeca44d8021b3ab0daaa9dc1efdbbbd43222d8df88a38b17df6be61c8787878660405161056c94939291906117cb565b60405180910390a250505050505050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105ef57506105ee82610f29565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61061b826105f6565b61062481610f92565b61062e8383610fa6565b50505050565b61063c61108f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106a0576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106aa8282611096565b505050565b5f801b6106bb81610f92565b6106c361117f565b50565b5f60015f9054906101000a900460ff16905090565b6106e3610daa565b846106ee8133610deb565b610724576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490504360025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555084846040516107b7929190611767565b604051809103902060045f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f20819055508673ffffffffffffffffffffffffffffffffffffffff167f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4878787878660405161085d959493929190611809565b60405180910390a250505050505050565b610876610daa565b816108818133610deb565b6108b7576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361091c576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508260035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504360025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508373ffffffffffffffffffffffffffffffffffffffff167f38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a38483604051610a62929190611855565b60405180910390a250505050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b5f801b610aa081610f92565b610aa86111e0565b50565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b610b3d826105f6565b610b4681610f92565b610b508383611096565b50505050565b6003602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b8e610daa565b7fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c309238610bb881610f92565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c1d576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508260035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504360025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508373ffffffffffffffffffffffffffffffffffffffff167f38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a38483604051610d63929190611855565b60405180910390a250505050565b7fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c30923881565b6002602052805f5260405f205f915090505481565b610db26106c6565b15610de9576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148015610eb257508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80610f2057505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610f1f57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b5b91505092915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610fa381610f9e61108f565b611241565b50565b5f610fb18383610acb565b6110855760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061102261108f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611089565b5f90505b92915050565b5f33905090565b5f6110a18383610acb565b15611175575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061111261108f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611179565b5f90505b92915050565b611187611292565b5f60015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111c961108f565b6040516111d691906116ea565b60405180910390a1565b6111e8610daa565b6001805f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861122a61108f565b60405161123791906116ea565b60405180910390a1565b61124b8282610acb565b61128e5780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161128592919061187c565b60405180910390fd5b5050565b61129a6106c6565b6112d0576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611303826112da565b9050919050565b611313816112f9565b811461131d575f80fd5b50565b5f8135905061132e8161130a565b92915050565b5f819050919050565b61134681611334565b8114611350575f80fd5b50565b5f813590506113618161133d565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261138857611387611367565b5b8235905067ffffffffffffffff8111156113a5576113a461136b565b5b6020830191508360018202830111156113c1576113c061136f565b5b9250929050565b5f805f80606085870312156113e0576113df6112d2565b5b5f6113ed87828801611320565b94505060206113fe87828801611353565b935050604085013567ffffffffffffffff81111561141f5761141e6112d6565b5b61142b87828801611373565b925092505092959194509250565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61146d81611439565b8114611477575f80fd5b50565b5f8135905061148881611464565b92915050565b5f602082840312156114a3576114a26112d2565b5b5f6114b08482850161147a565b91505092915050565b5f8115159050919050565b6114cd816114b9565b82525050565b5f6020820190506114e65f8301846114c4565b92915050565b5f60208284031215611501576115006112d2565b5b5f61150e84828501611353565b91505092915050565b61152081611334565b82525050565b5f6020820190506115395f830184611517565b92915050565b5f8060408385031215611555576115546112d2565b5b5f61156285828601611353565b925050602061157385828601611320565b9150509250929050565b5f819050919050565b61158f8161157d565b8114611599575f80fd5b50565b5f813590506115aa81611586565b92915050565b5f805f805f608086880312156115c9576115c86112d2565b5b5f6115d688828901611320565b95505060206115e788828901611353565b945050604086013567ffffffffffffffff811115611608576116076112d6565b5b61161488828901611373565b935093505060606116278882890161159c565b9150509295509295909350565b5f806040838503121561164a576116496112d2565b5b5f61165785828601611320565b925050602061166885828601611320565b9150509250929050565b5f8060408385031215611688576116876112d2565b5b5f61169585828601611320565b92505060206116a685828601611353565b9150509250929050565b5f602082840312156116c5576116c46112d2565b5b5f6116d284828501611320565b91505092915050565b6116e4816112f9565b82525050565b5f6020820190506116fd5f8301846116db565b92915050565b61170c8161157d565b82525050565b5f6020820190506117255f830184611703565b92915050565b5f81905092915050565b828183375f83830152505050565b5f61174e838561172b565b935061175b838584611735565b82840190509392505050565b5f611773828486611743565b91508190509392505050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f6117aa838561177f565b93506117b7838584611735565b6117c08361178f565b840190509392505050565b5f6060820190506117de5f830187611517565b81810360208301526117f181858761179f565b90506118006040830184611703565b95945050505050565b5f60808201905061181c5f830188611517565b818103602083015261182f81868861179f565b905061183e6040830185611703565b61184b6060830184611703565b9695505050505050565b5f6040820190506118685f8301856116db565b6118756020830184611703565b9392505050565b5f60408201905061188f5f8301856116db565b61189c6020830184611517565b939250505056fea26469706673582212208445087845429bc19763a6b8c72a444b5cfeb65064db1caf480a8229ae97817f64736f6c63430008190033",
    "constructor_args": [
      "0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"
    ],
    "compiler_version": "v0.8.19",
    "optimization_enabled": true,
    "optimization_runs": 200,
    "license_type": "MIT",
    "tags": [
      "did",
      "identity",
      "registry",
      "besu",
      "consortium"
    ],
    "metadata": {}
  },
  "gas_used": 1458987,
  "timestamp": "2025-08-18T19:39:02Z",
  "tx_hash": "0x2e67eb54930a45eeaceb16496ddcf577457ceb3cc7afced7e8510e6d8e86a409"
}