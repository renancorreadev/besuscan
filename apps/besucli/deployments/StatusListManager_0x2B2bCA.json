{
  "address": "0x2B2bCA20022574e3d1C558476fd8C59B375ec4c8",
  "creation_block_number": 233642,
  "creator_address": "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73",
  "deployment": {
    "name": "StatusListManager",
    "symbol": "SLM",
    "description": "Gerenciador de StatusList 2021 para Verifiable Credentials com controle de acesso baseado em roles",
    "contract_type": "StatusList-Manager",
    "source_code": "// Sources flattened with hardhat v3.0.0 https://hardhat.org\n\n// SPDX-License-Identifier: MIT\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/Context.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity \u003e=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n\n// File npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity \u003e=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n\n\n\n// File npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role =\u003e RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\n// File npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n\n\n\n// File contracts/RegistryAccess.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n * @title RegistryAccess\n * @notice Base de acesso para o consorcio (roles + pausa).\n *\n * Roles:\n * - DEFAULT_ADMIN_ROLE: governanca do consorcio\n * - REGISTRAR_ROLE: operadores do registro DID (recovery/ajustes)\n * - ISSUER_ROLE: emissores autorizados a publicar StatusLists\n */\nabstract contract RegistryAccess is AccessControl, Pausable {\n    bytes32 public constant REGISTRAR_ROLE = keccak256(\"REGISTRAR_ROLE\");\n    bytes32 public constant ISSUER_ROLE    = keccak256(\"ISSUER_ROLE\");\n\n    constructor(address admin) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// Pausa/despausa por admin. Os eventos sao emitidos dentro de _pause/_unpause.\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n}\n\n\n// File contracts/StatusListManager.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title StatusListManager\n * @notice Âncora de StatusList 2021 (bitstring off-chain) para VCs.\n *         Armazena {uri, hash, version, size, purpose} por listId.\n *         - Dados pessoais ficam off-chain (LGPD).\n */\ncontract StatusListManager is RegistryAccess {\n    struct ListMeta {\n        string  uri;       // URI off-chain (ex: S3/MinIO) da lista (bitstring)\n        bytes32 hash;      // hash do conteúdo versionado (ex: keccak256 do arquivo)\n        uint256 version;   // versão monotônica\n        uint64  size;      // tamanho em bits (opcional, referencia/consistencia)\n        bytes32 purpose;   // ex: keccak256(\"revocation\") / \"suspension\"\n        address issuer;    // quem controla a lista (deve ter ISSUER_ROLE)\n        bool    exists;\n    }\n\n    mapping(bytes32 =\u003e ListMeta) private lists; // key = keccak256(listId) (listId arbitrario: string/UUID)\n    event StatusListCreated(bytes32 indexed key, string listId, string uri, bytes32 hash, uint256 version, uint64 size, bytes32 purpose, address issuer);\n    event StatusListUpdated(bytes32 indexed key, string listId, string uri, bytes32 hash, uint256 version, address issuer);\n    event StatusListControllerTransferred(bytes32 indexed key, string listId, address oldIssuer, address newIssuer);\n\n    error ListAlreadyExists();\n    error ListNotFound();\n    error NotIssuer();\n    error InvalidVersion();\n\n    constructor(address admin) RegistryAccess(admin) {}\n\n    function _key(string memory listId) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(listId));\n    }\n\n    modifier onlyListIssuer(bytes32 key) {\n        if (!lists[key].exists) revert ListNotFound();\n        if (lists[key].issuer != msg.sender) revert NotIssuer();\n        _;\n    }\n\n    function getList(string calldata listId) external view returns (ListMeta memory) {\n        return lists[_key(listId)];\n    }\n\n    /**\n     * @notice Cria nova lista (primeira versao). Emissor precisa ISSUER_ROLE.\n     */\n    function createList(\n        string calldata listId,\n        string calldata uri,\n        bytes32 hash_,\n        uint64 size,\n        bytes32 purpose\n    ) external whenNotPaused onlyRole(ISSUER_ROLE) {\n        bytes32 key = _key(listId);\n        if (lists[key].exists) revert ListAlreadyExists();\n\n        lists[key] = ListMeta({\n            uri: uri,\n            hash: hash_,\n            version: 1,\n            size: size,\n            purpose: purpose,\n            issuer: msg.sender,\n            exists: true\n        });\n\n        emit StatusListCreated(key, listId, uri, hash_, 1, size, purpose, msg.sender);\n    }\n\n    /**\n     * @notice Publica/atualiza versão da lista. Emissor deve ser o controlador atual.\n     * @dev version deve ser estritamente maior (monotônico).\n     */\n    function publish(\n        string calldata listId,\n        uint256 newVersion,\n        string calldata newUri,\n        bytes32 newHash\n    ) external whenNotPaused onlyListIssuer(_key(listId)) {\n        bytes32 key = _key(listId);\n        if (newVersion \u003c= lists[key].version) revert InvalidVersion();\n\n        lists[key].version = newVersion;\n        lists[key].uri     = newUri;\n        lists[key].hash    = newHash;\n\n        emit StatusListUpdated(key, listId, newUri, newHash, newVersion, msg.sender);\n    }\n\n    /**\n     * @notice Transferencia de controle da lista (governanca/admin).\n     */\n    function transferListController(\n        string calldata listId,\n        address newIssuer\n    ) external whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newIssuer == address(0)) revert NotIssuer();\n        bytes32 key = _key(listId);\n        if (!lists[key].exists) revert ListNotFound();\n\n        address old = lists[key].issuer;\n        lists[key].issuer = newIssuer;\n        emit StatusListControllerTransferred(key, listId, old, newIssuer);\n    }\n}\n\n\n\n\n\n\n\n",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AccessControlBadConfirmation",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "neededRole",
            "type": "bytes32"
          }
        ],
        "name": "AccessControlUnauthorizedAccount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EnforcedPause",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ExpectedPause",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidVersion",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ListAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ListNotFound",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotIssuer",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "key",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "oldIssuer",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newIssuer",
            "type": "address"
          }
        ],
        "name": "StatusListControllerTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "key",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "uri",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "hash",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "version",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint64",
            "name": "size",
            "type": "uint64"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "purpose",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "issuer",
            "type": "address"
          }
        ],
        "name": "StatusListCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "key",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "uri",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "hash",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "version",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "issuer",
            "type": "address"
          }
        ],
        "name": "StatusListUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ISSUER_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "REGISTRAR_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "hash_",
            "type": "bytes32"
          },
          {
            "internalType": "uint64",
            "name": "size",
            "type": "uint64"
          },
          {
            "internalType": "bytes32",
            "name": "purpose",
            "type": "bytes32"
          }
        ],
        "name": "createList",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "listId",
            "type": "string"
          }
        ],
        "name": "getList",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "uri",
                "type": "string"
              },
              {
                "internalType": "bytes32",
                "name": "hash",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "version",
                "type": "uint256"
              },
              {
                "internalType": "uint64",
                "name": "size",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "purpose",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "issuer",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "exists",
                "type": "bool"
              }
            ],
            "internalType": "struct StatusListManager.ListMeta",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "pause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "paused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "newVersion",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "newUri",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "newHash",
            "type": "bytes32"
          }
        ],
        "name": "publish",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "callerConfirmation",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "listId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "newIssuer",
            "type": "address"
          }
        ],
        "name": "transferListController",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unpause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": "608060405234801561000f575f80fd5b5060405161215338038061215383398181016040528101906100319190610209565b806100445f801b8261004c60201b60201c565b505050610234565b5f61005d838361014160201b60201c565b6101375760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506100d46101a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061013b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101d8826101af565b9050919050565b6101e8816101ce565b81146101f2575f80fd5b50565b5f81519050610203816101df565b92915050565b5f6020828403121561021e5761021d6101ab565b5b5f61022b848285016101f5565b91505092915050565b611f12806102415f395ff3fe608060405234801561000f575f80fd5b50600436106100fe575f3560e01c806382aefa2411610095578063b904bcc211610064578063b904bcc214610284578063d547741f146102a0578063e5bdce7c146102bc578063f68e9553146102d8576100fe565b806382aefa241461020e5780638456cb591461022c57806391d1485414610236578063a217fddf14610266576100fe565b80633f4ba83a116100d15780633f4ba83a1461019a578063464460eb146101a4578063487daf02146101c05780635c975abb146101f0576100fe565b806301ffc9a714610102578063248a9ca3146101325780632f2ff15d1461016257806336568abe1461017e575b5f80fd5b61011c600480360381019061011791906112ec565b6102f6565b6040516101299190611331565b60405180910390f35b61014c6004803603810190610147919061137d565b61036f565b60405161015991906113b7565b60405180910390f35b61017c6004803603810190610177919061142a565b61038b565b005b6101986004803603810190610193919061142a565b6103ad565b005b6101a2610428565b005b6101be60048036038101906101b991906114fc565b61043f565b005b6101da60048036038101906101d5919061159f565b6106c2565b6040516101e79190611751565b60405180910390f35b6101f8610887565b6040516102059190611331565b60405180910390f35b61021661089c565b60405161022391906113b7565b60405180910390f35b6102346108c0565b005b610250600480360381019061024b919061142a565b6108d7565b60405161025d9190611331565b60405180910390f35b61026e61093a565b60405161027b91906113b7565b60405180910390f35b61029e60048036038101906102999190611771565b610940565b005b6102ba60048036038101906102b5919061142a565b610b2f565b005b6102d660048036038101906102d191906117f8565b610b51565b005b6102e0610df3565b6040516102ed91906113b7565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610368575061036782610e17565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b6103948261036f565b61039d81610e80565b6103a78383610e94565b50505050565b6103b5610f7d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610419576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104238282610f84565b505050565b5f801b61043481610e80565b61043c61106d565b50565b6104476110ce565b61049386868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110f565b60025f8281526020019081526020015f2060050160149054906101000a900460ff166104eb576040517fd5ad9acf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660025f8381526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610583576040517f54ec506300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6105d088888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110f565b905060025f8281526020019081526020015f2060020154861161061f576040517fa9146eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560025f8381526020019081526020015f2060020181905550848460025f8481526020019081526020015f205f01918261065a929190611ae0565b508260025f8381526020019081526020015f2060010181905550807f62b6a4500a5e9e3b5757a16268203ff778363a61fb8be8a54f50012b3683ce6089898888888c336040516106b09796959493929190611c15565b60405180910390a25050505050505050565b6106ca611230565b60025f61071985858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110f565b81526020019081526020015f206040518060e00160405290815f8201805461074090611913565b80601f016020809104026020016040519081016040528092919081815260200182805461076c90611913565b80156107b75780601f1061078e576101008083540402835291602001916107b7565b820191905f5260205f20905b81548152906001019060200180831161079a57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050905092915050565b5f60015f9054906101000a900460ff16905090565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b5f801b6108cc81610e80565b6108d461113e565b50565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b6109486110ce565b5f801b61095481610e80565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109b9576040517f54ec506300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610a0685858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110f565b905060025f8281526020019081526020015f2060050160149054906101000a900460ff16610a60576040517fd5ad9acf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8381526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508360025f8481526020019081526020015f206005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f144b61ad2a40a38f9cd1dc77abd14961d44137447236ba53e3b4851f25fe43cd87878488604051610b1f9493929190611c78565b60405180910390a2505050505050565b610b388261036f565b610b4181610e80565b610b4b8383610f84565b50505050565b610b596110ce565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa122610b8381610e80565b5f610bd089898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110f565b905060025f8281526020019081526020015f2060050160149054906101000a900460ff1615610c2b576040517f4761e1c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e0016040528088888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508152602001868152602001600181526020018567ffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581525060025f8381526020019081526020015f205f820151815f019081610ce99190611cb6565b5060208201518160010155604082015181600201556060820151816003015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506080820151816004015560a0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff021916908315150217905550905050807fff4527d56f07ba2003a7b81511cff81509c325abd9ddb003d277bccdf67626838a8a8a8a8a60018b8b33604051610de099989796959493929190611dcd565b60405180910390a2505050505050505050565b7fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c30923881565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e9181610e8c610f7d565b61119f565b50565b5f610e9f83836108d7565b610f735760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610f10610f7d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610f77565b5f90505b92915050565b5f33905090565b5f610f8f83836108d7565b15611063575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611000610f7d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611067565b5f90505b92915050565b6110756111f0565b5f60015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110b7610f7d565b6040516110c49190611e4c565b60405180910390a1565b6110d6610887565b1561110d576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f816040516020016111219190611e9f565b604051602081830303815290604052805190602001209050919050565b6111466110ce565b6001805f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611188610f7d565b6040516111959190611e4c565b60405180910390a1565b6111a982826108d7565b6111ec5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016111e3929190611eb5565b60405180910390fd5b5050565b6111f8610887565b61122e576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040518060e00160405280606081526020015f80191681526020015f81526020015f67ffffffffffffffff1681526020015f80191681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581525090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6112cb81611297565b81146112d5575f80fd5b50565b5f813590506112e6816112c2565b92915050565b5f602082840312156113015761130061128f565b5b5f61130e848285016112d8565b91505092915050565b5f8115159050919050565b61132b81611317565b82525050565b5f6020820190506113445f830184611322565b92915050565b5f819050919050565b61135c8161134a565b8114611366575f80fd5b50565b5f8135905061137781611353565b92915050565b5f602082840312156113925761139161128f565b5b5f61139f84828501611369565b91505092915050565b6113b18161134a565b82525050565b5f6020820190506113ca5f8301846113a8565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6113f9826113d0565b9050919050565b611409816113ef565b8114611413575f80fd5b50565b5f8135905061142481611400565b92915050565b5f80604083850312156114405761143f61128f565b5b5f61144d85828601611369565b925050602061145e85828601611416565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261148957611488611468565b5b8235905067ffffffffffffffff8111156114a6576114a561146c565b5b6020830191508360018202830111156114c2576114c1611470565b5b9250929050565b5f819050919050565b6114db816114c9565b81146114e5575f80fd5b50565b5f813590506114f6816114d2565b92915050565b5f805f805f80608087890312156115165761151561128f565b5b5f87013567ffffffffffffffff81111561153357611532611293565b5b61153f89828a01611474565b9650965050602061155289828a016114e8565b945050604087013567ffffffffffffffff81111561157357611572611293565b5b61157f89828a01611474565b9350935050606061159289828a01611369565b9150509295509295509295565b5f80602083850312156115b5576115b461128f565b5b5f83013567ffffffffffffffff8111156115d2576115d1611293565b5b6115de85828601611474565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61162c826115ea565b61163681856115f4565b9350611646818560208601611604565b61164f81611612565b840191505092915050565b6116638161134a565b82525050565b611672816114c9565b82525050565b5f67ffffffffffffffff82169050919050565b61169481611678565b82525050565b6116a3816113ef565b82525050565b6116b281611317565b82525050565b5f60e083015f8301518482035f8601526116d28282611622565b91505060208301516116e7602086018261165a565b5060408301516116fa6040860182611669565b50606083015161170d606086018261168b565b506080830151611720608086018261165a565b5060a083015161173360a086018261169a565b5060c083015161174660c08601826116a9565b508091505092915050565b5f6020820190508181035f83015261176981846116b8565b905092915050565b5f805f604084860312156117885761178761128f565b5b5f84013567ffffffffffffffff8111156117a5576117a4611293565b5b6117b186828701611474565b935093505060206117c486828701611416565b9150509250925092565b6117d781611678565b81146117e1575f80fd5b50565b5f813590506117f2816117ce565b92915050565b5f805f805f805f60a0888a0312156118135761181261128f565b5b5f88013567ffffffffffffffff8111156118305761182f611293565b5b61183c8a828b01611474565b9750975050602088013567ffffffffffffffff81111561185f5761185e611293565b5b61186b8a828b01611474565b9550955050604061187e8a828b01611369565b935050606061188f8a828b016117e4565b92505060806118a08a828b01611369565b91505092959891949750929550565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061192a57607f821691505b60208210810361193d5761193c6118e6565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261199f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611964565b6119a98683611964565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6119e46119df6119da846114c9565b6119c1565b6114c9565b9050919050565b5f819050919050565b6119fd836119ca565b611a11611a09826119eb565b848454611970565b825550505050565b5f90565b611a25611a19565b611a308184846119f4565b505050565b5b81811015611a5357611a485f82611a1d565b600181019050611a36565b5050565b601f821115611a9857611a6981611943565b611a7284611955565b81016020851015611a81578190505b611a95611a8d85611955565b830182611a35565b50505b505050565b5f82821c905092915050565b5f611ab85f1984600802611a9d565b1980831691505092915050565b5f611ad08383611aa9565b9150826002028217905092915050565b611aea83836118af565b67ffffffffffffffff811115611b0357611b026118b9565b5b611b0d8254611913565b611b18828285611a57565b5f601f831160018114611b45575f8415611b33578287013590505b611b3d8582611ac5565b865550611ba4565b601f198416611b5386611943565b5f5b82811015611b7a57848901358255600182019150602085019450602081019050611b55565b86831015611b975784890135611b93601f891682611aa9565b8355505b6001600288020188555050505b50505050505050565b5f82825260208201905092915050565b828183375f83830152505050565b5f611bd68385611bad565b9350611be3838584611bbd565b611bec83611612565b840190509392505050565b611c00816114c9565b82525050565b611c0f816113ef565b82525050565b5f60a0820190508181035f830152611c2e81898b611bcb565b90508181036020830152611c43818789611bcb565b9050611c5260408301866113a8565b611c5f6060830185611bf7565b611c6c6080830184611c06565b98975050505050505050565b5f6060820190508181035f830152611c91818688611bcb565b9050611ca06020830185611c06565b611cad6040830184611c06565b95945050505050565b611cbf826115ea565b67ffffffffffffffff811115611cd857611cd76118b9565b5b611ce28254611913565b611ced828285611a57565b5f60209050601f831160018114611d1e575f8415611d0c578287015190505b611d168582611ac5565b865550611d7d565b601f198416611d2c86611943565b5f5b82811015611d5357848901518255600182019150602085019450602081019050611d2e565b86831015611d705784890151611d6c601f891682611aa9565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f611da8611da3611d9e84611d85565b6119c1565b6114c9565b9050919050565b611db881611d8e565b82525050565b611dc781611678565b82525050565b5f60e0820190508181035f830152611de6818b8d611bcb565b90508181036020830152611dfb81898b611bcb565b9050611e0a60408301886113a8565b611e176060830187611daf565b611e246080830186611dbe565b611e3160a08301856113a8565b611e3e60c0830184611c06565b9a9950505050505050505050565b5f602082019050611e5f5f830184611c06565b92915050565b5f81905092915050565b5f611e79826115ea565b611e838185611e65565b9350611e93818560208601611604565b80840191505092915050565b5f611eaa8284611e6f565b915081905092915050565b5f604082019050611ec85f830185611c06565b611ed560208301846113a8565b939250505056fea2646970667358221220a7a08c0016dfd7e52fefad8e0a5f8750f2eaa032b1a7a9718a19dd171b6a3f5664736f6c63430008190033",
    "constructor_args": [
      "0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"
    ],
    "compiler_version": "v0.8.19",
    "optimization_enabled": true,
    "optimization_runs": 200,
    "license_type": "MIT",
    "tags": [
      "statuslist",
      "vc",
      "verifiable-credentials",
      "besu",
      "consortium"
    ],
    "metadata": {}
  },
  "gas_used": 1802331,
  "timestamp": "2025-08-18T14:36:10Z",
  "tx_hash": "0x7d1d974c25b37698c3534b1d1ad08cb3e98b5f6ac10485bc78ccd3b2b626048e"
}