{
  "address": "0xa50a51c09a5c451C52BB714527E1974b686D8e77",
  "creation_block_number": 4643,
  "creator_address": "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73",
  "deployment": {
    "name": "VocabChain",
    "symbol": "VCHAIN",
    "description": "Smart Contract para registro e acompanhamento de estudos de ingles",
    "contract_type": "Learning",
    "source_code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/**\n * @title VocabChain\n * @author VocabChain Team\n * @notice Smart contract for tracking vocabulary learning progress on blockchain\n * @dev Implements modern Solidity patterns with events, custom errors, and efficient storage\n */\ncontract VocabChain {\n    // =============================================================\n    //                          CONSTANTS\n    // =============================================================\n\n    uint256 public constant MAX_LEVEL = 100;\n    uint256 public constant WORDS_PER_LEVEL = 50;\n    uint256 public constant STREAK_MULTIPLIER = 2;\n    uint256 public constant PERFECT_SCORE_BONUS = 10;\n\n    // =============================================================\n    //                       CUSTOM ERRORS\n    // =============================================================\n\n    error VocabChain__UserNotRegistered();\n    error VocabChain__InvalidLevel(uint256 provided, uint256 max);\n    error VocabChain__InvalidScore(uint256 provided, uint256 max);\n    error VocabChain__AlreadyRegistered();\n    error VocabChain__UnauthorizedAccess();\n    error VocabChain__InvalidDifficulty();\n    error VocabChain__SessionAlreadyStarted();\n    error VocabChain__NoActiveSession();\n    error VocabChain__InvalidWordCount();\n\n    // =============================================================\n    //                           ENUMS\n    // =============================================================\n\n    enum Difficulty {\n        BEGINNER, // 0\n        ELEMENTARY, // 1\n        INTERMEDIATE, // 2\n        ADVANCED, // 3\n        EXPERT // 4\n    }\n\n    enum AchievementType {\n        FIRST_WORD,\n        STREAK_7,\n        STREAK_30,\n        PERFECT_SESSION,\n        LEVEL_UP,\n        VOCABULARY_MASTER\n    }\n\n    // =============================================================\n    //                          STRUCTS\n    // =============================================================\n\n    struct UserProfile {\n        bool isRegistered;\n        string username;\n        uint256 currentLevel;\n        uint256 totalWordsLearned;\n        uint256 currentStreak;\n        uint256 longestStreak;\n        uint256 totalSessions;\n        uint256 totalCorrectAnswers;\n        uint256 totalIncorrectAnswers;\n        Difficulty currentDifficulty;\n        uint256 registrationTimestamp;\n        uint256 lastActiveTimestamp;\n    }\n\n    struct StudySession {\n        uint256 sessionId;\n        address user;\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 wordsStudied;\n        uint256 correctAnswers;\n        uint256 incorrectAnswers;\n        Difficulty difficulty;\n        bool isCompleted;\n        uint256 scoreEarned;\n    }\n\n    struct Achievement {\n        AchievementType achievementType;\n        uint256 timestamp;\n        string description;\n        uint256 pointsAwarded;\n    }\n\n    struct WordProgress {\n        uint256 timesStudied;\n        uint256 correctAttempts;\n        uint256 incorrectAttempts;\n        uint256 lastStudiedTimestamp;\n        bool isMastered;\n    }\n\n    // =============================================================\n    //                         STORAGE\n    // =============================================================\n\n    mapping(address =\u003e UserProfile) private s_userProfiles;\n    mapping(address =\u003e StudySession) private s_activeSessions;\n    mapping(address =\u003e Achievement[]) private s_userAchievements;\n    mapping(address =\u003e mapping(string =\u003e WordProgress)) private s_wordProgress;\n    mapping(uint256 =\u003e StudySession) private s_completedSessions;\n\n    address[] private s_registeredUsers;\n    uint256 private s_nextSessionId = 1;\n    uint256 private s_totalSessionsCompleted;\n\n    // =============================================================\n    //                          EVENTS\n    // =============================================================\n\n    event UserRegistered(\n        address indexed user,\n        string username,\n        Difficulty difficulty,\n        uint256 timestamp\n    );\n\n    event SessionStarted(\n        address indexed user,\n        uint256 indexed sessionId,\n        Difficulty difficulty,\n        uint256 timestamp\n    );\n\n    event SessionCompleted(\n        address indexed user,\n        uint256 indexed sessionId,\n        uint256 wordsStudied,\n        uint256 correctAnswers,\n        uint256 scoreEarned,\n        uint256 timestamp\n    );\n\n    event WordStudied(\n        address indexed user,\n        string indexed wordHash,\n        bool correct,\n        uint256 timestamp\n    );\n\n    event LevelUp(\n        address indexed user,\n        uint256 previousLevel,\n        uint256 newLevel,\n        uint256 timestamp\n    );\n\n    event AchievementUnlocked(\n        address indexed user,\n        AchievementType indexed achievementType,\n        string description,\n        uint256 pointsAwarded,\n        uint256 timestamp\n    );\n\n    event StreakUpdated(\n        address indexed user,\n        uint256 newStreak,\n        bool isNewRecord,\n        uint256 timestamp\n    );\n\n    event DifficultyChanged(\n        address indexed user,\n        Difficulty previousDifficulty,\n        Difficulty newDifficulty,\n        uint256 timestamp\n    );\n\n    // =============================================================\n    //                        MODIFIERS\n    // =============================================================\n\n    modifier onlyRegistered() {\n        if (!s_userProfiles[msg.sender].isRegistered) {\n            revert VocabChain__UserNotRegistered();\n        }\n        _;\n    }\n\n    modifier validDifficulty(Difficulty _difficulty) {\n        if (uint8(_difficulty) \u003e uint8(Difficulty.EXPERT)) {\n            revert VocabChain__InvalidDifficulty();\n        }\n        _;\n    }\n\n    // =============================================================\n    //                    USER MANAGEMENT\n    // =============================================================\n\n    /**\n     * @notice Register a new user in the VocabChain system\n     * @param _username Unique username for the user\n     * @param _difficulty Starting difficulty level\n     */\n    function registerUser(\n        string calldata _username,\n        Difficulty _difficulty\n    ) external validDifficulty(_difficulty) {\n        if (s_userProfiles[msg.sender].isRegistered) {\n            revert VocabChain__AlreadyRegistered();\n        }\n\n        s_userProfiles[msg.sender] = UserProfile({\n            isRegistered: true,\n            username: _username,\n            currentLevel: 1,\n            totalWordsLearned: 0,\n            currentStreak: 0,\n            longestStreak: 0,\n            totalSessions: 0,\n            totalCorrectAnswers: 0,\n            totalIncorrectAnswers: 0,\n            currentDifficulty: _difficulty,\n            registrationTimestamp: block.timestamp,\n            lastActiveTimestamp: block.timestamp\n        });\n\n        s_registeredUsers.push(msg.sender);\n\n        // Award first achievement\n        _unlockAchievement(\n            msg.sender,\n            AchievementType.FIRST_WORD,\n            \"Welcome to VocabChain!\",\n            10\n        );\n\n        emit UserRegistered(\n            msg.sender,\n            _username,\n            _difficulty,\n            block.timestamp\n        );\n    }\n\n    // =============================================================\n    //                    SESSION MANAGEMENT\n    // =============================================================\n\n    /**\n     * @notice Start a new study session\n     * @param _difficulty Difficulty level for this session\n     */\n    function startSession(\n        Difficulty _difficulty\n    ) external onlyRegistered validDifficulty(_difficulty) {\n        if (s_activeSessions[msg.sender].sessionId != 0) {\n            revert VocabChain__SessionAlreadyStarted();\n        }\n\n        uint256 sessionId = s_nextSessionId++;\n\n        s_activeSessions[msg.sender] = StudySession({\n            sessionId: sessionId,\n            user: msg.sender,\n            startTimestamp: block.timestamp,\n            endTimestamp: 0,\n            wordsStudied: 0,\n            correctAnswers: 0,\n            incorrectAnswers: 0,\n            difficulty: _difficulty,\n            isCompleted: false,\n            scoreEarned: 0\n        });\n\n        // Update user's last active timestamp\n        s_userProfiles[msg.sender].lastActiveTimestamp = block.timestamp;\n\n        emit SessionStarted(\n            msg.sender,\n            sessionId,\n            _difficulty,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Record a word study attempt during active session\n     * @param _wordHash Keccak256 hash of the word studied\n     * @param _correct Whether the answer was correct\n     */\n    function recordWordStudy(\n        string calldata _wordHash,\n        bool _correct\n    ) external onlyRegistered {\n        StudySession storage session = s_activeSessions[msg.sender];\n        if (session.sessionId == 0) {\n            revert VocabChain__NoActiveSession();\n        }\n\n        // Update session stats\n        session.wordsStudied++;\n        if (_correct) {\n            session.correctAnswers++;\n        } else {\n            session.incorrectAnswers++;\n        }\n\n        // Update word progress\n        WordProgress storage wordProgress = s_wordProgress[msg.sender][\n            _wordHash\n        ];\n        wordProgress.timesStudied++;\n        wordProgress.lastStudiedTimestamp = block.timestamp;\n\n        if (_correct) {\n            wordProgress.correctAttempts++;\n            // Mark as mastered if answered correctly 3 times\n            if (\n                wordProgress.correctAttempts \u003e= 3 \u0026\u0026\n                wordProgress.correctAttempts \u003e wordProgress.incorrectAttempts\n            ) {\n                wordProgress.isMastered = true;\n            }\n        } else {\n            wordProgress.incorrectAttempts++;\n            wordProgress.isMastered = false; // Reset mastery on incorrect answer\n        }\n\n        emit WordStudied(msg.sender, _wordHash, _correct, block.timestamp);\n    }\n\n    /**\n     * @notice Complete the current study session\n     */\n    function completeSession() external onlyRegistered {\n        StudySession storage session = s_activeSessions[msg.sender];\n        if (session.sessionId == 0) {\n            revert VocabChain__NoActiveSession();\n        }\n\n        if (session.wordsStudied == 0) {\n            revert VocabChain__InvalidWordCount();\n        }\n\n        // Calculate score\n        uint256 baseScore = session.correctAnswers * 10;\n        uint256 accuracyBonus = 0;\n\n        if (session.wordsStudied \u003e 0) {\n            uint256 accuracy = (session.correctAnswers * 100) /\n                session.wordsStudied;\n            if (accuracy == 100) {\n                accuracyBonus = PERFECT_SCORE_BONUS;\n                _unlockAchievement(\n                    msg.sender,\n                    AchievementType.PERFECT_SESSION,\n                    \"Perfect Session!\",\n                    50\n                );\n            }\n        }\n\n        uint256 streakBonus = s_userProfiles[msg.sender].currentStreak *\n            STREAK_MULTIPLIER;\n        session.scoreEarned = baseScore + accuracyBonus + streakBonus;\n\n        // Mark session as completed\n        session.endTimestamp = block.timestamp;\n        session.isCompleted = true;\n\n        // Update user profile\n        UserProfile storage user = s_userProfiles[msg.sender];\n        user.totalWordsLearned += session.wordsStudied;\n        user.totalCorrectAnswers += session.correctAnswers;\n        user.totalIncorrectAnswers += session.incorrectAnswers;\n        user.totalSessions++;\n        user.lastActiveTimestamp = block.timestamp;\n\n        // Update streak\n        _updateStreak(msg.sender, session.correctAnswers \u003e 0);\n\n        // Check for level up\n        _checkLevelUp(msg.sender);\n\n        // Store completed session\n        s_completedSessions[session.sessionId] = session;\n        s_totalSessionsCompleted++;\n\n        emit SessionCompleted(\n            msg.sender,\n            session.sessionId,\n            session.wordsStudied,\n            session.correctAnswers,\n            session.scoreEarned,\n            block.timestamp\n        );\n\n        // Clear active session\n        delete s_activeSessions[msg.sender];\n    }\n\n    // =============================================================\n    //                    INTERNAL FUNCTIONS\n    // =============================================================\n\n    /**\n     * @dev Update user's streak based on session performance\n     */\n    function _updateStreak(address _user, bool _hasCorrectAnswers) internal {\n        UserProfile storage user = s_userProfiles[_user];\n        bool isNewRecord = false;\n\n        if (_hasCorrectAnswers) {\n            user.currentStreak++;\n            if (user.currentStreak \u003e user.longestStreak) {\n                user.longestStreak = user.currentStreak;\n                isNewRecord = true;\n            }\n\n            // Check for streak achievements\n            if (user.currentStreak == 7) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.STREAK_7,\n                    \"7 Day Streak!\",\n                    100\n                );\n            } else if (user.currentStreak == 30) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.STREAK_30,\n                    \"30 Day Streak Master!\",\n                    500\n                );\n            }\n        } else {\n            user.currentStreak = 0;\n        }\n\n        emit StreakUpdated(\n            _user,\n            user.currentStreak,\n            isNewRecord,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Check if user should level up based on words learned\n     */\n    function _checkLevelUp(address _user) internal {\n        UserProfile storage user = s_userProfiles[_user];\n        uint256 expectedLevel = (user.totalWordsLearned / WORDS_PER_LEVEL) + 1;\n\n        if (expectedLevel \u003e user.currentLevel \u0026\u0026 expectedLevel \u003c= MAX_LEVEL) {\n            uint256 previousLevel = user.currentLevel;\n            user.currentLevel = expectedLevel;\n\n            _unlockAchievement(\n                _user,\n                AchievementType.LEVEL_UP,\n                string(\n                    abi.encodePacked(\n                        \"Reached Level \",\n                        _toString(expectedLevel),\n                        \"!\"\n                    )\n                ),\n                expectedLevel * 25\n            );\n\n            // Check for vocabulary master achievement\n            if (expectedLevel \u003e= MAX_LEVEL) {\n                _unlockAchievement(\n                    _user,\n                    AchievementType.VOCABULARY_MASTER,\n                    \"Vocabulary Master - Maximum Level Reached!\",\n                    1000\n                );\n            }\n\n            emit LevelUp(_user, previousLevel, expectedLevel, block.timestamp);\n        }\n    }\n\n    /**\n     * @dev Unlock achievement for user\n     */\n    function _unlockAchievement(\n        address _user,\n        AchievementType _type,\n        string memory _description,\n        uint256 _points\n    ) internal {\n        Achievement memory newAchievement = Achievement({\n            achievementType: _type,\n            timestamp: block.timestamp,\n            description: _description,\n            pointsAwarded: _points\n        });\n\n        s_userAchievements[_user].push(newAchievement);\n\n        emit AchievementUnlocked(\n            _user,\n            _type,\n            _description,\n            _points,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Convert uint256 to string\n     */\n    function _toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    // =============================================================\n    //                      VIEW FUNCTIONS\n    // =============================================================\n\n    /**\n     * @notice Get user profile information\n     * @param _user Address of the user\n     * @return UserProfile struct\n     */\n    function getUserProfile(\n        address _user\n    ) external view returns (UserProfile memory) {\n        return s_userProfiles[_user];\n    }\n\n    /**\n     * @notice Get user's active session\n     * @param _user Address of the user\n     * @return StudySession struct\n     */\n    function getActiveSession(\n        address _user\n    ) external view returns (StudySession memory) {\n        return s_activeSessions[_user];\n    }\n\n    /**\n     * @notice Get user's achievements\n     * @param _user Address of the user\n     * @return Array of Achievement structs\n     */\n    function getUserAchievements(\n        address _user\n    ) external view returns (Achievement[] memory) {\n        return s_userAchievements[_user];\n    }\n\n    /**\n     * @notice Get word progress for specific user and word\n     * @param _user Address of the user\n     * @param _wordHash Hash of the word\n     * @return WordProgress struct\n     */\n    function getWordProgress(\n        address _user,\n        string calldata _wordHash\n    ) external view returns (WordProgress memory) {\n        return s_wordProgress[_user][_wordHash];\n    }\n\n    /**\n     * @notice Get completed session by ID\n     * @param _sessionId ID of the session\n     * @return StudySession struct\n     */\n    function getCompletedSession(\n        uint256 _sessionId\n    ) external view returns (StudySession memory) {\n        return s_completedSessions[_sessionId];\n    }\n\n    /**\n     * @notice Get total number of registered users\n     * @return Number of registered users\n     */\n    function getTotalUsers() external view returns (uint256) {\n        return s_registeredUsers.length;\n    }\n\n    /**\n     * @notice Get total number of completed sessions\n     * @return Number of completed sessions\n     */\n    function getTotalCompletedSessions() external view returns (uint256) {\n        return s_totalSessionsCompleted;\n    }\n\n    /**\n     * @notice Check if user is registered\n     * @param _user Address to check\n     * @return Boolean indicating registration status\n     */\n    function isUserRegistered(address _user) external view returns (bool) {\n        return s_userProfiles[_user].isRegistered;\n    }\n}\n",
    "abi": [
      {
        "inputs": [],
        "name": "VocabChain__AlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__InvalidDifficulty",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "provided",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max",
            "type": "uint256"
          }
        ],
        "name": "VocabChain__InvalidLevel",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "provided",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max",
            "type": "uint256"
          }
        ],
        "name": "VocabChain__InvalidScore",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__InvalidWordCount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__NoActiveSession",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__SessionAlreadyStarted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__UnauthorizedAccess",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VocabChain__UserNotRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "enum VocabChain.AchievementType",
            "name": "achievementType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "description",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "pointsAwarded",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "AchievementUnlocked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "previousDifficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "newDifficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "DifficultyChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousLevel",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newLevel",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "LevelUp",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "sessionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "wordsStudied",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "correctAnswers",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "scoreEarned",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "SessionCompleted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "sessionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "difficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "SessionStarted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newStreak",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "isNewRecord",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "StreakUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "enum VocabChain.Difficulty",
            "name": "difficulty",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "UserRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "wordHash",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "correct",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "WordStudied",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "MAX_LEVEL",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PERFECT_SCORE_BONUS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STREAK_MULTIPLIER",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "WORDS_PER_LEVEL",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "completeSession",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getActiveSession",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "sessionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "wordsStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "difficulty",
                "type": "uint8"
              },
              {
                "internalType": "bool",
                "name": "isCompleted",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "scoreEarned",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.StudySession",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_sessionId",
            "type": "uint256"
          }
        ],
        "name": "getCompletedSession",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "sessionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "wordsStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "difficulty",
                "type": "uint8"
              },
              {
                "internalType": "bool",
                "name": "isCompleted",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "scoreEarned",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.StudySession",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getTotalCompletedSessions",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getTotalUsers",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserAchievements",
        "outputs": [
          {
            "components": [
              {
                "internalType": "enum VocabChain.AchievementType",
                "name": "achievementType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "pointsAwarded",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.Achievement[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserProfile",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "isRegistered",
                "type": "bool"
              },
              {
                "internalType": "string",
                "name": "username",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "currentLevel",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalWordsLearned",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "currentStreak",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "longestStreak",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalSessions",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalCorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalIncorrectAnswers",
                "type": "uint256"
              },
              {
                "internalType": "enum VocabChain.Difficulty",
                "name": "currentDifficulty",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "registrationTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lastActiveTimestamp",
                "type": "uint256"
              }
            ],
            "internalType": "struct VocabChain.UserProfile",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_wordHash",
            "type": "string"
          }
        ],
        "name": "getWordProgress",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "timesStudied",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "correctAttempts",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "incorrectAttempts",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lastStudiedTimestamp",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "isMastered",
                "type": "bool"
              }
            ],
            "internalType": "struct VocabChain.WordProgress",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "isUserRegistered",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_wordHash",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "_correct",
            "type": "bool"
          }
        ],
        "name": "recordWordStudy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "enum VocabChain.Difficulty",
            "name": "_difficulty",
            "type": "uint8"
          }
        ],
        "name": "registerUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "enum VocabChain.Difficulty",
            "name": "_difficulty",
            "type": "uint8"
          }
        ],
        "name": "startSession",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": "",
    "constructor_args": null,
    "compiler_version": "v0.8.19",
    "optimization_enabled": true,
    "optimization_runs": 200,
    "license_type": "MIT",
    "tags": [],
    "metadata": {}
  },
  "gas_used": 1748726,
  "timestamp": "2025-09-11T06:00:06Z",
  "tx_hash": "0xeb97346dd47e595ca43cad3b88af4399e57d7613ccc8e6b43767db659ddec249"
}