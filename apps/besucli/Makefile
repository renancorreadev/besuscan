# ==============================================================================
# BesuCLI - Makefile Completo
# BesuScan Command Line Interface Build & Installation
# ==============================================================================

# Configura√ß√µes do projeto
BINARY_NAME := besucli
BINARY_UNIX := $(BINARY_NAME)_unix
BINARY_WINDOWS := $(BINARY_NAME).exe
BINARY_DARWIN := $(BINARY_NAME)_darwin

# Vers√£o do projeto (pode ser sobrescrita via VERSION=)
VERSION ?= 1.0.0
BUILD_TIME := $(shell date -u '+%Y-%m-%d_%H:%M:%S')
COMMIT_HASH := $(shell git rev-parse --short HEAD 2>/dev/null || echo "development")

# Diret√≥rios
BUILD_DIR := bin
DIST_DIR := dist
INSTALL_DIR := /usr/local/bin
CONFIG_DIR := /etc/besucli
TEMPLATES_DIR := /usr/local/share/besucli/templates

# Flags de build
LDFLAGS := -ldflags "-X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME) -X main.CommitHash=$(COMMIT_HASH)"
GOOS ?= $(shell go env GOOS)
GOARCH ?= $(shell go env GOARCH)

# Cores para output
GREEN := \033[0;32m
RED := \033[0;31m
BLUE := \033[0;34m
YELLOW := \033[0;33m
CYAN := \033[0;36m
NC := \033[0m

# Docker config
DOCKER_USER := besuscan
REPO := $(DOCKER_USER)/cli

.PHONY: help all build clean install uninstall dev test lint format docker-build docker-push release

# Comando padr√£o
all: help

# ==============================================================================
# COMANDOS PRINCIPAIS
# ==============================================================================

help: ## Mostrar ajuda completa do Makefile
	@echo "$(CYAN)üöÄ BesuCLI - Makefile de Build e Instala√ß√£o$(NC)"
	@echo "$(BLUE)================================================$(NC)"
	@echo ""
	@echo "$(GREEN)üìã COMANDOS DISPON√çVEIS:$(NC)"
	@echo ""
	@echo "$(YELLOW)üî® BUILD & COMPILA√á√ÉO:$(NC)"
	@echo "  make build          # Compilar para o sistema atual"
	@echo "  make build-all      # Compilar para todas as plataformas"
	@echo "  make build-linux    # Compilar para Linux"
	@echo "  make build-windows  # Compilar para Windows"
	@echo "  make build-darwin   # Compilar para macOS"
	@echo ""
	@echo "$(YELLOW)üì¶ INSTALA√á√ÉO & DISTRIBUI√á√ÉO:$(NC)"
	@echo "  make install        # Instalar no sistema (requer sudo)"
	@echo "  make uninstall      # Remover do sistema (requer sudo)"
	@echo "  make install-user   # Instalar no diret√≥rio do usu√°rio"
	@echo "  make package        # Criar pacote de distribui√ß√£o"
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è  DESENVOLVIMENTO:$(NC)"
	@echo "  make dev            # Executar em modo desenvolvimento"
	@echo "  make test           # Executar testes"
	@echo "  make lint           # Verificar c√≥digo com linter"
	@echo "  make format         # Formatar c√≥digo"
	@echo "  make clean          # Limpar arquivos de build"
	@echo ""
	@echo "$(YELLOW)üê≥ DOCKER:$(NC)"
	@echo "  make docker-build   # Build da imagem Docker"
	@echo "  make docker-push    # Push para Docker Hub"
	@echo "  make release        # Release completo (build + push)"
	@echo ""
	@echo "$(YELLOW)üìö UTILIT√ÅRIOS:$(NC)"
	@echo "  make cli-help       # Mostrar ajuda da CLI"
	@echo "  make cli-version    # Mostrar vers√£o da CLI"
	@echo "  make config-help    # Mostrar ajuda de configura√ß√£o"
	@echo ""
	@echo "$(BLUE)üìñ EXEMPLOS DE USO:$(NC)"
	@echo "  make install VERSION=1.0.0    # Instalar vers√£o espec√≠fica"
	@echo "  make build GOOS=linux GOARCH=amd64  # Build cross-platform"
	@echo "  make release VERSION=2.0.0    # Criar release Docker"
	@echo ""
	@echo "$(GREEN)üí° DICA: Use 'make <comando> VERSION=x.y.z' para especificar vers√£o$(NC)"

# ==============================================================================
# BUILD & COMPILA√á√ÉO
# ==============================================================================

build: ## Compilar para o sistema atual
	@echo "$(GREEN)üî® Compilando BesuCLI para $(GOOS)/$(GOARCH)...$(NC)"
	@mkdir -p $(BUILD_DIR)
	@go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) ./cmd
	@echo "$(GREEN)‚úÖ Build conclu√≠do: $(BUILD_DIR)/$(BINARY_NAME)$(NC)"
	@echo "$(BLUE)üìä Informa√ß√µes do bin√°rio:$(NC)"
	@echo "  Vers√£o: $(VERSION)"
	@echo "  Build Time: $(BUILD_TIME)"
	@echo "  Commit: $(COMMIT_HASH)"
	@echo "  Plataforma: $(GOOS)/$(GOARCH)"

build-all: ## Compilar para todas as plataformas
	@echo "$(GREEN)üî® Compilando para todas as plataformas...$(NC)"
	@mkdir -p $(DIST_DIR)
	@$(MAKE) build-linux
	@$(MAKE) build-windows
	@$(MAKE) build-darwin
	@echo "$(GREEN)‚úÖ Build para todas as plataformas conclu√≠do!$(NC)"

build-linux: ## Compilar para Linux
	@echo "$(GREEN)üêß Compilando para Linux...$(NC)"
	@GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o $(DIST_DIR)/$(BINARY_UNIX) ./cmd
	@echo "$(GREEN)‚úÖ Linux build: $(DIST_DIR)/$(BINARY_UNIX)$(NC)"

build-windows: ## Compilar para Windows
	@echo "$(GREEN)ü™ü Compilando para Windows...$(NC)"
	@GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o $(DIST_DIR)/$(BINARY_WINDOWS) ./cmd
	@echo "$(GREEN)‚úÖ Windows build: $(DIST_DIR)/$(BINARY_WINDOWS)$(NC)"

build-darwin: ## Compilar para macOS
	@echo "$(GREEN)üçé Compilando para macOS...$(NC)"
	@GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o $(DIST_DIR)/$(BINARY_DARWIN) ./cmd
	@echo "$(GREEN)‚úÖ macOS build: $(DIST_DIR)/$(BINARY_DARWIN)$(NC)"

# ==============================================================================
# INSTALA√á√ÉO & DISTRIBUI√á√ÉO
# ==============================================================================

install: ## Instalar no sistema (requer sudo)
	@echo "$(GREEN)üì¶ Instalando BesuCLI no sistema...$(NC)"
	@if [ ! -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è Bin√°rio n√£o encontrado, compilando primeiro...$(NC)"; \
		$(MAKE) build; \
	fi
	@echo "$(BLUE)üîß Criando diret√≥rios do sistema...$(NC)"
	@sudo mkdir -p $(CONFIG_DIR)
	@sudo mkdir -p $(TEMPLATES_DIR)
	@echo "$(BLUE)üìÅ Copiando bin√°rio para $(INSTALL_DIR)...$(NC)"
	@sudo cp $(BUILD_DIR)/$(BINARY_NAME) $(INSTALL_DIR)/
	@sudo chmod +x $(INSTALL_DIR)/$(BINARY_NAME)
	@echo "$(BLUE)üìã Copiando arquivos de configura√ß√£o...$(NC)"
	@sudo cp besucli.yaml $(CONFIG_DIR)/
	@sudo cp -r templates/* $(TEMPLATES_DIR)/
	@echo "$(BLUE)üîê Configurando permiss√µes...$(NC)"
	@sudo chown -R root:root $(CONFIG_DIR)
	@sudo chmod 644 $(CONFIG_DIR)/besucli.yaml
	@sudo chmod -R 755 $(TEMPLATES_DIR)
	@echo "$(GREEN)‚úÖ BesuCLI instalado com sucesso!$(NC)"
	@echo "$(BLUE)üìç Localiza√ß√£o: $(INSTALL_DIR)/$(BINARY_NAME)$(NC)"
	@echo "$(BLUE)‚öôÔ∏è Configura√ß√£o: $(CONFIG_DIR)$(NC)"
	@echo "$(BLUE)üìö Templates: $(TEMPLATES_DIR)$(NC)"
	@echo "$(CYAN)üí° Execute 'besucli --help' para come√ßar!$(NC)"

install-user: ## Instalar no diret√≥rio do usu√°rio
	@echo "$(GREEN)üì¶ Instalando BesuCLI no diret√≥rio do usu√°rio...$(NC)"
	@if [ ! -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è Bin√°rio n√£o encontrado, compilando primeiro...$(NC)"; \
		$(MAKE) build; \
	fi
	@USER_BIN_DIR=$$HOME/.local/bin; \
	USER_CONFIG_DIR=$$HOME/.config/besucli; \
	USER_TEMPLATES_DIR=$$HOME/.local/share/besucli/templates; \
	echo "$(BLUE)üîß Criando diret√≥rios do usu√°rio...$(NC)"; \
	mkdir -p $$USER_BIN_DIR; \
	mkdir -p $$USER_CONFIG_DIR; \
	mkdir -p $$USER_TEMPLATES_DIR; \
	echo "$(BLUE)üìÅ Copiando bin√°rio para $$USER_BIN_DIR...$(NC)"; \
	cp $(BUILD_DIR)/$(BINARY_NAME) $$USER_BIN_DIR/; \
	chmod +x $$USER_BIN_DIR/$(BINARY_NAME); \
	echo "$(BLUE)üìã Copiando arquivos de configura√ß√£o...$(NC)"; \
	cp besucli.yaml $$USER_CONFIG_DIR/; \
	cp -r templates/* $$USER_TEMPLATES_DIR/; \
	echo "$(GREEN)‚úÖ BesuCLI instalado no diret√≥rio do usu√°rio!$(NC)"; \
	echo "$(BLUE)üìç Localiza√ß√£o: $$USER_BIN_DIR/$(BINARY_NAME)$(NC)"; \
	echo "$(BLUE)‚öôÔ∏è Configura√ß√£o: $$USER_CONFIG_DIR$(NC)"; \
	echo "$(BLUE)üìö Templates: $$USER_TEMPLATES_DIR$(NC)"; \
	echo "$(YELLOW)‚ö†Ô∏è Adicione $$USER_BIN_DIR ao seu PATH se necess√°rio$(NC)"; \
	echo "$(CYAN)üí° Execute 'besucli --help' para come√ßar!$(NC)"

uninstall: ## Remover do sistema (requer sudo)
	@echo "$(RED)üóëÔ∏è Desinstalando BesuCLI...$(NC)"
	@if [ -f "$(INSTALL_DIR)/$(BINARY_NAME)" ]; then \
		echo "$(BLUE)üìÅ Removendo bin√°rio...$(NC)"; \
		sudo rm -f $(INSTALL_DIR)/$(BINARY_NAME); \
	fi
	@if [ -d "$(CONFIG_DIR)" ]; then \
		echo "$(BLUE)‚öôÔ∏è Removendo configura√ß√µes...$(NC)"; \
		sudo rm -rf $(CONFIG_DIR); \
	fi
	@if [ -d "$(TEMPLATES_DIR)" ]; then \
		echo "$(BLUE)üìö Removendo templates...$(NC)"; \
		sudo rm -rf $(TEMPLATES_DIR); \
	fi
	@echo "$(GREEN)‚úÖ BesuCLI desinstalado com sucesso!$(NC)"

package: ## Criar pacote de distribui√ß√£o
	@echo "$(GREEN)üì¶ Criando pacote de distribui√ß√£o...$(NC)"
	@$(MAKE) build-all
	@mkdir -p $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)
	@cp $(DIST_DIR)/$(BINARY_UNIX) $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/$(BINARY_NAME)
	@cp $(DIST_DIR)/$(BINARY_WINDOWS) $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cp $(DIST_DIR)/$(BINARY_DARWIN) $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cp -r templates $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cp besucli.yaml $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cp README.md $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cp deploy.md $(DIST_DIR)/$(BINARY_NAME)-$(VERSION)/
	@cd $(DIST_DIR) && tar -czf $(BINARY_NAME)-$(VERSION).tar.gz $(BINARY_NAME)-$(VERSION)/
	@cd $(DIST_DIR) && zip -r $(BINARY_NAME)-$(VERSION).zip $(BINARY_NAME)-$(VERSION)/
	@echo "$(GREEN)‚úÖ Pacotes criados:$(NC)"
	@echo "  üì¶ $(DIST_DIR)/$(BINARY_NAME)-$(VERSION).tar.gz"
	@echo "  üì¶ $(DIST_DIR)/$(BINARY_NAME)-$(VERSION).zip"

# ==============================================================================
# DESENVOLVIMENTO
# ==============================================================================

dev: ## Executar em modo desenvolvimento
	@echo "$(GREEN)üöÄ Executando BesuCLI em modo desenvolvimento...$(NC)"
	@if [ ! -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è Bin√°rio n√£o encontrado, compilando primeiro...$(NC)"; \
		$(MAKE) build; \
	fi
	@echo "$(CYAN)üí° Dica: Use Ctrl+C para parar$(NC)"
	@$(BUILD_DIR)/$(BINARY_NAME) --help

test: ## Executar testes
	@echo "$(GREEN)üß™ Executando testes...$(NC)"
	@go test -v ./...
	@echo "$(GREEN)‚úÖ Testes conclu√≠dos!$(NC)"

lint: ## Verificar c√≥digo com linter
	@echo "$(GREEN)üîç Verificando c√≥digo com linter...$(NC)"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è golangci-lint n√£o encontrado, instalando...$(NC)"; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
		golangci-lint run; \
	fi
	@echo "$(GREEN)‚úÖ Linting conclu√≠do!$(NC)"

format: ## Formatar c√≥digo
	@echo "$(GREEN)‚ú® Formatando c√≥digo...$(NC)"
	@go fmt ./...
	@go vet ./...
	@echo "$(GREEN)‚úÖ Formata√ß√£o conclu√≠da!$(NC)"

clean: ## Limpar arquivos de build
	@echo "$(YELLOW)üßπ Limpando arquivos de build...$(NC)"
	@rm -rf $(BUILD_DIR)
	@rm -rf $(DIST_DIR)
	@go clean
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

# ==============================================================================
# DOCKER
# ==============================================================================

docker-build: ## Build da imagem Docker
	@echo "$(GREEN)üê≥ Build da imagem Docker...$(NC)"
	@docker build \
		--build-arg VERSION=$(VERSION) \
		--build-arg BUILD_TIME=$(BUILD_TIME) \
		--build-arg COMMIT=$(COMMIT_HASH) \
		-t $(REPO):latest \
		-t $(REPO):$(VERSION) \
		.
	@echo "$(GREEN)‚úÖ Imagem Docker criada: $(REPO):$(VERSION)$(NC)"

docker-push: ## Push para Docker Hub
	@echo "$(GREEN)üì§ Push para Docker Hub...$(NC)"
	@docker push $(REPO):latest
	@docker push $(REPO):$(VERSION)
	@echo "$(GREEN)‚úÖ Push conclu√≠do!$(NC)"

release: docker-build docker-push ## Release completo (build + push)
	@echo "$(GREEN)üéâ Release v$(VERSION) conclu√≠do!$(NC)"
	@echo "$(BLUE)üì¶ Imagens dispon√≠veis:$(NC)"
	@echo "  üê≥ $(REPO):latest"
	@echo "  üê≥ $(REPO):$(VERSION)"

# ==============================================================================
# UTILIT√ÅRIOS DE AJUDA
# ==============================================================================

cli-help: ## Mostrar ajuda da CLI
	@echo "$(CYAN)üìö Ajuda da CLI BesuCLI$(NC)"
	@echo "$(BLUE)================================$(NC)"
	@if [ -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		$(BUILD_DIR)/$(BINARY_NAME) --help; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Bin√°rio n√£o encontrado, compilando primeiro...$(NC)"; \
		$(MAKE) build; \
		$(BUILD_DIR)/$(BINARY_NAME) --help; \
	fi

cli-version: ## Mostrar vers√£o da CLI
	@echo "$(CYAN)üìã Vers√£o da CLI BesuCLI$(NC)"
	@echo "$(BLUE)================================$(NC)"
	@if [ -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		$(BUILD_DIR)/$(BINARY_NAME) --version; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Bin√°rio n√£o encontrado, compilando primeiro...$(NC)"; \
		$(MAKE) build; \
		$(BUILD_DIR)/$(BINARY_NAME) --version; \
	fi

config-help: ## Mostrar ajuda de configura√ß√£o
	@echo "$(CYAN)‚öôÔ∏è Ajuda de Configura√ß√£o BesuCLI$(NC)"
	@echo "$(BLUE)=====================================$(NC)"
	@echo ""
	@echo "$(GREEN)üìÅ ARQUIVOS DE CONFIGURA√á√ÉO:$(NC)"
	@echo "  ‚Ä¢ besucli.yaml          # Configura√ß√£o principal"
	@echo "  ‚Ä¢ config/hubweb3-network.yaml  # Configura√ß√£o espec√≠fica da rede"
	@echo "  ‚Ä¢ templates/            # Templates de contratos"
	@echo ""
	@echo "$(GREEN)üîß COMANDOS DE CONFIGURA√á√ÉO:$(NC)"
	@echo "  besucli config set-wallet    # Configurar carteira"
	@echo "  besucli config set-network   # Configurar rede"
	@echo "  besucli config show          # Mostrar configura√ß√£o atual"
	@echo ""
	@echo "$(GREEN)üìã ESTRUTURA DE CONFIGURA√á√ÉO:$(NC)"
	@echo "  network:                    # Configura√ß√µes da rede"
	@echo "    rpc_url: URL do n√≥ RPC"
	@echo "    name: Nome da rede"
	@echo "    chain_id: ID da chain"
	@echo "  api:                        # Configura√ß√µes da API"
	@echo "    base_url: URL da API BesuScan"
	@echo "  wallet:                     # Configura√ß√µes da carteira"
	@echo "    private_key: Chave privada"
	@echo "  gas:                        # Configura√ß√µes de gas"
	@echo "    limit: Limite de gas"
	@echo "    price: Pre√ßo do gas"
	@echo ""
	@echo "$(GREEN)üí° EXEMPLOS DE USO:$(NC)"
	@echo "  # Deploy de contrato via YAML"
	@echo "  besucli deploy templates/counter.yml"
	@echo ""
	@echo "  # Deploy com flags"
	@echo "  besucli deploy --name 'MyToken' --type 'ERC-20' --abi token.abi --bytecode token.bin"
	@echo ""
	@echo "  # Verificar contrato existente"
	@echo "  besucli verify --address 0x123... --name 'MyToken' --abi token.abi"
	@echo ""
	@echo "  # Interagir com contrato"
	@echo "  besucli interact read 0x123... balanceOf 0x456..."
	@echo "  besucli interact write 0x123... transfer 0x456... 1000"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è IMPORTANTE:$(NC)"
	@echo "  ‚Ä¢ Configure sua chave privada com 'besucli config set-wallet'"
	@echo "  ‚Ä¢ Ajuste as configura√ß√µes de rede conforme necess√°rio"
	@echo "  ‚Ä¢ Use templates YAML para deployments complexos"

# ==============================================================================
# COMANDOS AUXILIARES
# ==============================================================================

deps: ## Instalar depend√™ncias
	@echo "$(GREEN)üì¶ Instalando depend√™ncias...$(NC)"
	@go mod download
	@go mod tidy
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas!$(NC)"

check: ## Verificar estado do projeto
	@echo "$(GREEN)üîç Verificando estado do projeto...$(NC)"
	@echo "$(BLUE)üìã Informa√ß√µes do projeto:$(NC)"
	@echo "  Vers√£o: $(VERSION)"
	@echo "  Build Time: $(BUILD_TIME)"
	@echo "  Commit: $(COMMIT_HASH)"
	@echo "  GOOS: $(GOOS)"
	@echo "  GOARCH: $(GOARCH)"
	@echo ""
	@echo "$(BLUE)üìÅ Estrutura de diret√≥rios:$(NC)"
	@echo "  Build: $(BUILD_DIR)"
	@echo "  Dist: $(DIST_DIR)"
	@echo "  Config: $(CONFIG_DIR)"
	@echo "  Templates: $(TEMPLATES_DIR)"
	@echo ""
	@echo "$(BLUE)üîß Status:$(NC)"
	@if [ -f "$(BUILD_DIR)/$(BINARY_NAME)" ]; then \
		echo "  Bin√°rio: ‚úÖ $(BUILD_DIR)/$(BINARY_NAME)"; \
	else \
		echo "  Bin√°rio: ‚ùå N√£o encontrado"; \
	fi
	@if [ -f "besucli.yaml" ]; then \
		echo "  Config: ‚úÖ besucli.yaml"; \
	else \
		echo "  Config: ‚ùå N√£o encontrado"; \
	fi
	@if [ -d "templates" ]; then \
		echo "  Templates: ‚úÖ templates/"; \
	else \
		echo "  Templates: ‚ùå N√£o encontrado"; \
	fi

# ==============================================================================
# REGRAS ESPECIAIS
# ==============================================================================

# Ignora argumentos desconhecidos
%:
	@:

# Comando para mostrar vers√£o
version:
	@echo "$(VERSION)"
